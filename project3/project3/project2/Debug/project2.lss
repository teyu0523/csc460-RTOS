
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00001b4a  00001bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b31  00800230  00800230  00001c0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c0e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000318  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008d  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046f5  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fa  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002431  00000000  00000000  000079d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  00009e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001892  00000000  00000000  0000a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c6b  00000000  00000000  0000be82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000daed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_5>
      18:	bf c0       	rjmp	.+382    	; 0x198 <__vector_6>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__vector_23>
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b4 c0       	rjmp	.+360    	; 0x1ea <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e4       	ldi	r30, 0x4A	; 74
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 33       	cpi	r26, 0x30	; 48
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2d e0       	ldi	r18, 0x0D	; 13
     110:	a0 e3       	ldi	r26, 0x30	; 48
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 36       	cpi	r26, 0x61	; 97
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	63 d6       	rcall	.+3270   	; 0xde6 <main>
     120:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_Z7IR_initv>:

void disable_interrupt() {
	EIMSK &= ~(1<<INT5);
	TIMSK3 &= ~(1<<OCIE3A);
	TIFR3 |= (1<<OCF3A);
	is_receiving = 0;
     126:	ea e0       	ldi	r30, 0x0A	; 10
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	80 81       	ld	r24, Z
     12c:	88 62       	ori	r24, 0x28	; 40
     12e:	80 83       	st	Z, r24
     130:	a0 e2       	ldi	r26, 0x20	; 32
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	1c 92       	st	X, r1
     136:	e1 e2       	ldi	r30, 0x21	; 33
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	10 82       	st	Z, r1
     13c:	8c 91       	ld	r24, X
     13e:	83 60       	ori	r24, 0x03	; 3
     140:	8c 93       	st	X, r24
     142:	80 81       	ld	r24, Z
     144:	88 61       	ori	r24, 0x18	; 24
     146:	80 83       	st	Z, r24
     148:	8c 91       	ld	r24, X
     14a:	87 7f       	andi	r24, 0xF7	; 247
     14c:	8c 93       	st	X, r24
     14e:	80 81       	ld	r24, Z
     150:	81 60       	ori	r24, 0x01	; 1
     152:	80 83       	st	Z, r24
     154:	85 ea       	ldi	r24, 0xA5	; 165
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	90 93 29 01 	sts	0x0129, r25
     15c:	80 93 28 01 	sts	0x0128, r24
     160:	82 ed       	ldi	r24, 0xD2	; 210
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	90 93 2d 01 	sts	0x012D, r25
     168:	80 93 2c 01 	sts	0x012C, r24
     16c:	10 92 90 00 	sts	0x0090, r1
     170:	e1 e9       	ldi	r30, 0x91	; 145
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	10 82       	st	Z, r1
     176:	80 81       	ld	r24, Z
     178:	81 60       	ori	r24, 0x01	; 1
     17a:	80 83       	st	Z, r24
     17c:	e1 e7       	ldi	r30, 0x71	; 113
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	8d 7f       	andi	r24, 0xFD	; 253
     184:	80 83       	st	Z, r24
     186:	6d 98       	cbi	0x0d, 5	; 13
     188:	ea e6       	ldi	r30, 0x6A	; 106
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	8c 60       	ori	r24, 0x0C	; 12
     190:	80 83       	st	Z, r24
     192:	ed 9a       	sbi	0x1d, 5	; 29
     194:	e5 9a       	sbi	0x1c, 5	; 28
     196:	08 95       	ret

00000198 <__vector_6>:
     198:	1f 92       	push	r1
     19a:	0f 92       	push	r0
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	8f 93       	push	r24
     1a4:	9f 93       	push	r25
     1a6:	80 91 34 02 	lds	r24, 0x0234
     1aa:	81 11       	cpse	r24, r1
     1ac:	17 c0       	rjmp	.+46     	; 0x1dc <__vector_6+0x44>
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 34 02 	sts	0x0234, r24
     1b4:	10 92 32 02 	sts	0x0232, r1
     1b8:	10 92 31 02 	sts	0x0231, r1
     1bc:	c1 9a       	sbi	0x18, 1	; 24
     1be:	80 91 94 00 	lds	r24, 0x0094
     1c2:	90 91 95 00 	lds	r25, 0x0095
     1c6:	80 52       	subi	r24, 0x20	; 32
     1c8:	91 4d       	sbci	r25, 0xD1	; 209
     1ca:	90 93 99 00 	sts	0x0099, r25
     1ce:	80 93 98 00 	sts	0x0098, r24
     1d2:	80 91 71 00 	lds	r24, 0x0071
     1d6:	82 60       	ori	r24, 0x02	; 2
     1d8:	80 93 71 00 	sts	0x0071, r24
     1dc:	9f 91       	pop	r25
     1de:	8f 91       	pop	r24
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_32>:
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	0b b6       	in	r0, 0x3b	; 59
     1f6:	0f 92       	push	r0
     1f8:	2f 93       	push	r18
     1fa:	3f 93       	push	r19
     1fc:	4f 93       	push	r20
     1fe:	5f 93       	push	r21
     200:	6f 93       	push	r22
     202:	7f 93       	push	r23
     204:	8f 93       	push	r24
     206:	9f 93       	push	r25
     208:	af 93       	push	r26
     20a:	bf 93       	push	r27
     20c:	ef 93       	push	r30
     20e:	ff 93       	push	r31
     210:	80 91 34 02 	lds	r24, 0x0234
     214:	88 23       	and	r24, r24
     216:	91 f1       	breq	.+100    	; 0x27c <__vector_32+0x92>
     218:	65 99       	sbic	0x0c, 5	; 12
     21a:	0e c0       	rjmp	.+28     	; 0x238 <__vector_32+0x4e>
     21c:	30 91 32 02 	lds	r19, 0x0232
     220:	20 91 31 02 	lds	r18, 0x0231
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	03 2e       	mov	r0, r19
     22a:	01 c0       	rjmp	.+2      	; 0x22e <__vector_32+0x44>
     22c:	88 0f       	add	r24, r24
     22e:	0a 94       	dec	r0
     230:	ea f7       	brpl	.-6      	; 0x22c <__vector_32+0x42>
     232:	82 2b       	or	r24, r18
     234:	80 93 31 02 	sts	0x0231, r24
     238:	80 91 32 02 	lds	r24, 0x0232
     23c:	8f 5f       	subi	r24, 0xFF	; 255
     23e:	80 93 32 02 	sts	0x0232, r24
     242:	80 91 98 00 	lds	r24, 0x0098
     246:	90 91 99 00 	lds	r25, 0x0099
     24a:	80 5c       	subi	r24, 0xC0	; 192
     24c:	90 4e       	sbci	r25, 0xE0	; 224
     24e:	90 93 99 00 	sts	0x0099, r25
     252:	80 93 98 00 	sts	0x0098, r24
     256:	80 91 32 02 	lds	r24, 0x0232
     25a:	88 30       	cpi	r24, 0x08	; 8
     25c:	88 f0       	brcs	.+34     	; 0x280 <__vector_32+0x96>
     25e:	10 92 34 02 	sts	0x0234, r1
     262:	80 91 71 00 	lds	r24, 0x0071
     266:	8d 7f       	andi	r24, 0xFD	; 253
     268:	80 93 71 00 	sts	0x0071, r24
     26c:	c1 9a       	sbi	0x18, 1	; 24
     26e:	e5 9a       	sbi	0x1c, 5	; 28
     270:	80 91 31 02 	lds	r24, 0x0231
     274:	80 93 30 02 	sts	0x0230, r24
     278:	98 d6       	rcall	.+3376   	; 0xfaa <_Z12ir_rxhandlerv>
     27a:	02 c0       	rjmp	.+4      	; 0x280 <__vector_32+0x96>
     27c:	80 91 33 02 	lds	r24, 0x0233
     280:	ff 91       	pop	r31
     282:	ef 91       	pop	r30
     284:	bf 91       	pop	r27
     286:	af 91       	pop	r26
     288:	9f 91       	pop	r25
     28a:	8f 91       	pop	r24
     28c:	7f 91       	pop	r23
     28e:	6f 91       	pop	r22
     290:	5f 91       	pop	r21
     292:	4f 91       	pop	r20
     294:	3f 91       	pop	r19
     296:	2f 91       	pop	r18
     298:	0f 90       	pop	r0
     29a:	0b be       	out	0x3b, r0	; 59
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <_Z4markv>:
// //	PORTC &= ~(1 << PC2);
// 	_delay_us(500);
// }

void mark() {
	TCCR5A |= (1<<COM5C1);
     2a6:	e0 e2       	ldi	r30, 0x20	; 32
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	80 81       	ld	r24, Z
     2ac:	88 60       	ori	r24, 0x08	; 8
     2ae:	80 83       	st	Z, r24
	PORTC |= (1 << PC2);
     2b0:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b2:	8f ec       	ldi	r24, 0xCF	; 207
     2b4:	97 e0       	ldi	r25, 0x07	; 7
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <_Z4markv+0x10>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_Z4markv+0x16>
     2bc:	00 00       	nop
     2be:	08 95       	ret

000002c0 <_Z5spacev>:
	_delay_us(500);
}
void space() {
	TCCR5A &= ~(1 << COM5C1);
     2c0:	e0 e2       	ldi	r30, 0x20	; 32
     2c2:	f1 e0       	ldi	r31, 0x01	; 1
     2c4:	80 81       	ld	r24, Z
     2c6:	87 7f       	andi	r24, 0xF7	; 247
     2c8:	80 83       	st	Z, r24
	PORTC &= ~(1 << PC2);
     2ca:	42 98       	cbi	0x08, 2	; 8
     2cc:	8f ec       	ldi	r24, 0xCF	; 207
     2ce:	97 e0       	ldi	r25, 0x07	; 7
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <_Z5spacev+0x10>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <_Z5spacev+0x16>
     2d6:	00 00       	nop
     2d8:	08 95       	ret

000002da <_Z11IR_transmith>:
// 	//space();
// 	//enable_interupt();
// 	//sei();
// }

void IR_transmit(uint8_t data) {
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	08 2f       	mov	r16, r24
	/*uint8_t sreg = SREG;
	cli();
	disable_interrupt();*/

	mark();
     2e4:	e0 df       	rcall	.-64     	; 0x2a6 <_Z4markv>
	space();
     2e6:	ec df       	rcall	.-40     	; 0x2c0 <_Z5spacev>
	for(int i = 0; i < 8; i++) {
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	d0 e0       	ldi	r29, 0x00	; 0
		if(((data >> i) & 0x1)) {
     2ec:	10 e0       	ldi	r17, 0x00	; 0
     2ee:	c8 01       	movw	r24, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <_Z11IR_transmith+0x1e>
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <_Z11IR_transmith+0x1a>
     2fc:	80 ff       	sbrs	r24, 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <_Z11IR_transmith+0x2a>
			mark();
     300:	d2 df       	rcall	.-92     	; 0x2a6 <_Z4markv>
     302:	01 c0       	rjmp	.+2      	; 0x306 <_Z11IR_transmith+0x2c>
			} else {
			space();
     304:	dd df       	rcall	.-70     	; 0x2c0 <_Z5spacev>
	cli();
	disable_interrupt();*/

	mark();
	space();
	for(int i = 0; i < 8; i++) {
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	c8 30       	cpi	r28, 0x08	; 8
     30a:	d1 05       	cpc	r29, r1
     30c:	81 f7       	brne	.-32     	; 0x2ee <_Z11IR_transmith+0x14>
	}
	space();

	/*enable_interrupt();
	SREG = sreg; // sei();*/
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
			mark();
			} else {
			space();
		}
	}
	space();
     316:	d4 cf       	rjmp	.-88     	; 0x2c0 <_Z5spacev>

00000318 <_Z10IR_getLastv>:
	/*enable_interrupt();
	SREG = sreg; // sei();*/
}

uint8_t IR_getLast(){
	return outputByte;
     318:	80 91 30 02 	lds	r24, 0x0230
     31c:	08 95       	ret

0000031e <_ZL4idlev>:
    arg = cur_task->arg;

    SREG = sreg;

    return arg;
}
     31e:	ff cf       	rjmp	.-2      	; 0x31e <_ZL4idlev>

00000320 <_ZL11exit_kernelv>:
     320:	ff 93       	push	r31
     322:	fc b7       	in	r31, 0x3c	; 60
     324:	ff 93       	push	r31
     326:	ff b7       	in	r31, 0x3f	; 63
     328:	f8 94       	cli
     32a:	ff 93       	push	r31
     32c:	ef 93       	push	r30
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	bf 93       	push	r27
     334:	af 93       	push	r26
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	7f 93       	push	r23
     33c:	6f 93       	push	r22
     33e:	5f 93       	push	r21
     340:	4f 93       	push	r20
     342:	3f 93       	push	r19
     344:	2f 93       	push	r18
     346:	1f 93       	push	r17
     348:	0f 93       	push	r16
     34a:	ff 92       	push	r15
     34c:	ef 92       	push	r14
     34e:	df 92       	push	r13
     350:	cf 92       	push	r12
     352:	bf 92       	push	r11
     354:	af 92       	push	r10
     356:	9f 92       	push	r9
     358:	8f 92       	push	r8
     35a:	7f 92       	push	r7
     35c:	6f 92       	push	r6
     35e:	5f 92       	push	r5
     360:	4f 92       	push	r4
     362:	3f 92       	push	r3
     364:	2f 92       	push	r2
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	8d b7       	in	r24, 0x3d	; 61
     36c:	9e b7       	in	r25, 0x3e	; 62
     36e:	90 93 c2 0c 	sts	0x0CC2, r25
     372:	80 93 c1 0c 	sts	0x0CC1, r24
     376:	e0 91 c3 0c 	lds	r30, 0x0CC3
     37a:	f0 91 c4 0c 	lds	r31, 0x0CC4
     37e:	f3 95       	inc	r31
     380:	80 81       	ld	r24, Z
     382:	91 81       	ldd	r25, Z+1	; 0x01
     384:	9e bf       	out	0x3e, r25	; 62
     386:	8d bf       	out	0x3d, r24	; 61
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	2f 90       	pop	r2
     38e:	3f 90       	pop	r3
     390:	4f 90       	pop	r4
     392:	5f 90       	pop	r5
     394:	6f 90       	pop	r6
     396:	7f 90       	pop	r7
     398:	8f 90       	pop	r8
     39a:	9f 90       	pop	r9
     39c:	af 90       	pop	r10
     39e:	bf 90       	pop	r11
     3a0:	cf 90       	pop	r12
     3a2:	df 90       	pop	r13
     3a4:	ef 90       	pop	r14
     3a6:	ff 90       	pop	r15
     3a8:	0f 91       	pop	r16
     3aa:	1f 91       	pop	r17
     3ac:	2f 91       	pop	r18
     3ae:	3f 91       	pop	r19
     3b0:	4f 91       	pop	r20
     3b2:	5f 91       	pop	r21
     3b4:	6f 91       	pop	r22
     3b6:	7f 91       	pop	r23
     3b8:	8f 91       	pop	r24
     3ba:	9f 91       	pop	r25
     3bc:	af 91       	pop	r26
     3be:	bf 91       	pop	r27
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	ef 91       	pop	r30
     3c6:	ff 91       	pop	r31
     3c8:	ff bf       	out	0x3f, r31	; 63
     3ca:	ff 91       	pop	r31
     3cc:	fc bf       	out	0x3c, r31	; 60
     3ce:	ff 91       	pop	r31
     3d0:	08 95       	ret

000003d2 <_ZL12enter_kernelv>:
     3d2:	ff 93       	push	r31
     3d4:	fc b7       	in	r31, 0x3c	; 60
     3d6:	ff 93       	push	r31
     3d8:	ff b7       	in	r31, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	ff 93       	push	r31
     3de:	ef 93       	push	r30
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	bf 93       	push	r27
     3e6:	af 93       	push	r26
     3e8:	9f 93       	push	r25
     3ea:	8f 93       	push	r24
     3ec:	7f 93       	push	r23
     3ee:	6f 93       	push	r22
     3f0:	5f 93       	push	r21
     3f2:	4f 93       	push	r20
     3f4:	3f 93       	push	r19
     3f6:	2f 93       	push	r18
     3f8:	1f 93       	push	r17
     3fa:	0f 93       	push	r16
     3fc:	ff 92       	push	r15
     3fe:	ef 92       	push	r14
     400:	df 92       	push	r13
     402:	cf 92       	push	r12
     404:	bf 92       	push	r11
     406:	af 92       	push	r10
     408:	9f 92       	push	r9
     40a:	8f 92       	push	r8
     40c:	7f 92       	push	r7
     40e:	6f 92       	push	r6
     410:	5f 92       	push	r5
     412:	4f 92       	push	r4
     414:	3f 92       	push	r3
     416:	2f 92       	push	r2
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	e0 91 c3 0c 	lds	r30, 0x0CC3
     420:	f0 91 c4 0c 	lds	r31, 0x0CC4
     424:	8d b7       	in	r24, 0x3d	; 61
     426:	9e b7       	in	r25, 0x3e	; 62
     428:	f3 95       	inc	r31
     42a:	91 83       	std	Z+1, r25	; 0x01
     42c:	80 83       	st	Z, r24
     42e:	80 91 c1 0c 	lds	r24, 0x0CC1
     432:	90 91 c2 0c 	lds	r25, 0x0CC2
     436:	9e bf       	out	0x3e, r25	; 62
     438:	8d bf       	out	0x3d, r24	; 61
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	2f 90       	pop	r2
     440:	3f 90       	pop	r3
     442:	4f 90       	pop	r4
     444:	5f 90       	pop	r5
     446:	6f 90       	pop	r6
     448:	7f 90       	pop	r7
     44a:	8f 90       	pop	r8
     44c:	9f 90       	pop	r9
     44e:	af 90       	pop	r10
     450:	bf 90       	pop	r11
     452:	cf 90       	pop	r12
     454:	df 90       	pop	r13
     456:	ef 90       	pop	r14
     458:	ff 90       	pop	r15
     45a:	0f 91       	pop	r16
     45c:	1f 91       	pop	r17
     45e:	2f 91       	pop	r18
     460:	3f 91       	pop	r19
     462:	4f 91       	pop	r20
     464:	5f 91       	pop	r21
     466:	6f 91       	pop	r22
     468:	7f 91       	pop	r23
     46a:	8f 91       	pop	r24
     46c:	9f 91       	pop	r25
     46e:	af 91       	pop	r26
     470:	bf 91       	pop	r27
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	ef 91       	pop	r30
     478:	ff 91       	pop	r31
     47a:	ff bf       	out	0x3f, r31	; 63
     47c:	ff 91       	pop	r31
     47e:	fc bf       	out	0x3c, r31	; 60
     480:	ff 91       	pop	r31
     482:	08 95       	ret

00000484 <_ZL7enqueueP7queue_tP9td_struct>:
     484:	fc 01       	movw	r30, r24
     486:	db 01       	movw	r26, r22
     488:	a0 5f       	subi	r26, 0xF0	; 240
     48a:	be 4f       	sbci	r27, 0xFE	; 254
     48c:	1d 92       	st	X+, r1
     48e:	1c 92       	st	X, r1
     490:	80 81       	ld	r24, Z
     492:	91 81       	ldd	r25, Z+1	; 0x01
     494:	89 2b       	or	r24, r25
     496:	19 f4       	brne	.+6      	; 0x49e <_ZL7enqueueP7queue_tP9td_struct+0x1a>
     498:	71 83       	std	Z+1, r23	; 0x01
     49a:	60 83       	st	Z, r22
     49c:	06 c0       	rjmp	.+12     	; 0x4aa <_ZL7enqueueP7queue_tP9td_struct+0x26>
     49e:	a2 81       	ldd	r26, Z+2	; 0x02
     4a0:	b3 81       	ldd	r27, Z+3	; 0x03
     4a2:	a0 5f       	subi	r26, 0xF0	; 240
     4a4:	be 4f       	sbci	r27, 0xFE	; 254
     4a6:	6d 93       	st	X+, r22
     4a8:	7c 93       	st	X, r23
     4aa:	73 83       	std	Z+3, r23	; 0x03
     4ac:	62 83       	std	Z+2, r22	; 0x02
     4ae:	08 95       	ret

000004b0 <Task_Terminate>:
     4b0:	cf 93       	push	r28
     4b2:	cf b7       	in	r28, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	80 93 0c 03 	sts	0x030C, r24
     4bc:	8a df       	rcall	.-236    	; 0x3d2 <_ZL12enter_kernelv>
     4be:	cf bf       	out	0x3f, r28	; 63
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <_ZL7dequeueP7queue_t.isra.1>:
     4c4:	dc 01       	movw	r26, r24
     4c6:	8d 91       	ld	r24, X+
     4c8:	9c 91       	ld	r25, X
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	49 f0       	breq	.+18     	; 0x4e2 <_ZL7dequeueP7queue_t.isra.1+0x1e>
     4d0:	fc 01       	movw	r30, r24
     4d2:	e0 5f       	subi	r30, 0xF0	; 240
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	20 81       	ld	r18, Z
     4d8:	31 81       	ldd	r19, Z+1	; 0x01
     4da:	2d 93       	st	X+, r18
     4dc:	3c 93       	st	X, r19
     4de:	11 82       	std	Z+1, r1	; 0x01
     4e0:	10 82       	st	Z, r1
     4e2:	08 95       	ret

000004e4 <__vector_17>:
     4e4:	ff 93       	push	r31
     4e6:	fc b7       	in	r31, 0x3c	; 60
     4e8:	ff 93       	push	r31
     4ea:	ff b7       	in	r31, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	f0 68       	ori	r31, 0x80	; 128
     4f0:	ff 93       	push	r31
     4f2:	ef 93       	push	r30
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	bf 93       	push	r27
     4fa:	af 93       	push	r26
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	7f 93       	push	r23
     502:	6f 93       	push	r22
     504:	5f 93       	push	r21
     506:	4f 93       	push	r20
     508:	3f 93       	push	r19
     50a:	2f 93       	push	r18
     50c:	1f 93       	push	r17
     50e:	0f 93       	push	r16
     510:	ff 92       	push	r15
     512:	ef 92       	push	r14
     514:	df 92       	push	r13
     516:	cf 92       	push	r12
     518:	bf 92       	push	r11
     51a:	af 92       	push	r10
     51c:	9f 92       	push	r9
     51e:	8f 92       	push	r8
     520:	7f 92       	push	r7
     522:	6f 92       	push	r6
     524:	5f 92       	push	r5
     526:	4f 92       	push	r4
     528:	3f 92       	push	r3
     52a:	2f 92       	push	r2
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	e0 91 c3 0c 	lds	r30, 0x0CC3
     534:	f0 91 c4 0c 	lds	r31, 0x0CC4
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	f3 95       	inc	r31
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	80 91 c1 0c 	lds	r24, 0x0CC1
     546:	90 91 c2 0c 	lds	r25, 0x0CC2
     54a:	9e bf       	out	0x3e, r25	; 62
     54c:	8d bf       	out	0x3d, r24	; 61
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	80 93 0c 03 	sts	0x030C, r24
     554:	e8 e8       	ldi	r30, 0x88	; 136
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	80 5f       	subi	r24, 0xF0	; 240
     55e:	98 4d       	sbci	r25, 0xD8	; 216
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	80 83       	st	Z, r24
     564:	80 91 c1 0c 	lds	r24, 0x0CC1
     568:	90 91 c2 0c 	lds	r25, 0x0CC2
     56c:	9e bf       	out	0x3e, r25	; 62
     56e:	8d bf       	out	0x3d, r24	; 61
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	2f 90       	pop	r2
     576:	3f 90       	pop	r3
     578:	4f 90       	pop	r4
     57a:	5f 90       	pop	r5
     57c:	6f 90       	pop	r6
     57e:	7f 90       	pop	r7
     580:	8f 90       	pop	r8
     582:	9f 90       	pop	r9
     584:	af 90       	pop	r10
     586:	bf 90       	pop	r11
     588:	cf 90       	pop	r12
     58a:	df 90       	pop	r13
     58c:	ef 90       	pop	r14
     58e:	ff 90       	pop	r15
     590:	0f 91       	pop	r16
     592:	1f 91       	pop	r17
     594:	2f 91       	pop	r18
     596:	3f 91       	pop	r19
     598:	4f 91       	pop	r20
     59a:	5f 91       	pop	r21
     59c:	6f 91       	pop	r22
     59e:	7f 91       	pop	r23
     5a0:	8f 91       	pop	r24
     5a2:	9f 91       	pop	r25
     5a4:	af 91       	pop	r26
     5a6:	bf 91       	pop	r27
     5a8:	cf 91       	pop	r28
     5aa:	df 91       	pop	r29
     5ac:	ef 91       	pop	r30
     5ae:	ff 91       	pop	r31
     5b0:	ff bf       	out	0x3f, r31	; 63
     5b2:	ff 91       	pop	r31
     5b4:	fc bf       	out	0x3c, r31	; 60
     5b6:	ff 91       	pop	r31
     5b8:	08 95       	ret

000005ba <OS_Abort>:
     5ba:	f8 94       	cli
     5bc:	80 e6       	ldi	r24, 0x60	; 96
     5be:	80 93 01 01 	sts	0x0101, r24
     5c2:	80 91 00 02 	lds	r24, 0x0200
     5c6:	86 30       	cpi	r24, 0x06	; 6
     5c8:	28 f4       	brcc	.+10     	; 0x5d4 <OS_Abort+0x1a>
     5ca:	80 91 00 02 	lds	r24, 0x0200
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	30 e4       	ldi	r19, 0x40	; 64
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <OS_Abort+0x22>
     5d4:	80 91 00 02 	lds	r24, 0x0200
     5d8:	85 50       	subi	r24, 0x05	; 5
     5da:	30 e2       	ldi	r19, 0x20	; 32
     5dc:	40 e6       	ldi	r20, 0x60	; 96
     5de:	40 93 02 01 	sts	0x0102, r20
     5e2:	94 e6       	ldi	r25, 0x64	; 100
     5e4:	2f e7       	ldi	r18, 0x7F	; 127
     5e6:	58 e3       	ldi	r21, 0x38	; 56
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	21 50       	subi	r18, 0x01	; 1
     5ec:	50 40       	sbci	r21, 0x00	; 0
     5ee:	60 40       	sbci	r22, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <OS_Abort+0x30>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <OS_Abort+0x3a>
     5f4:	00 00       	nop
     5f6:	91 50       	subi	r25, 0x01	; 1
     5f8:	a9 f7       	brne	.-22     	; 0x5e4 <OS_Abort+0x2a>
     5fa:	10 92 02 01 	sts	0x0102, r1
     5fe:	98 e2       	ldi	r25, 0x28	; 40
     600:	7f e7       	ldi	r23, 0x7F	; 127
     602:	28 e3       	ldi	r18, 0x38	; 56
     604:	51 e0       	ldi	r21, 0x01	; 1
     606:	71 50       	subi	r23, 0x01	; 1
     608:	20 40       	sbci	r18, 0x00	; 0
     60a:	50 40       	sbci	r21, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <OS_Abort+0x4c>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <OS_Abort+0x56>
     610:	00 00       	nop
     612:	91 50       	subi	r25, 0x01	; 1
     614:	a9 f7       	brne	.-22     	; 0x600 <OS_Abort+0x46>
     616:	98 17       	cp	r25, r24
     618:	f1 f0       	breq	.+60     	; 0x656 <OS_Abort+0x9c>
     61a:	30 93 02 01 	sts	0x0102, r19
     61e:	2a e0       	ldi	r18, 0x0A	; 10
     620:	6f e7       	ldi	r22, 0x7F	; 127
     622:	78 e3       	ldi	r23, 0x38	; 56
     624:	51 e0       	ldi	r21, 0x01	; 1
     626:	61 50       	subi	r22, 0x01	; 1
     628:	70 40       	sbci	r23, 0x00	; 0
     62a:	50 40       	sbci	r21, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <OS_Abort+0x6c>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <OS_Abort+0x76>
     630:	00 00       	nop
     632:	21 50       	subi	r18, 0x01	; 1
     634:	a9 f7       	brne	.-22     	; 0x620 <OS_Abort+0x66>
     636:	10 92 02 01 	sts	0x0102, r1
     63a:	2a e0       	ldi	r18, 0x0A	; 10
     63c:	6f e7       	ldi	r22, 0x7F	; 127
     63e:	78 e3       	ldi	r23, 0x38	; 56
     640:	51 e0       	ldi	r21, 0x01	; 1
     642:	61 50       	subi	r22, 0x01	; 1
     644:	70 40       	sbci	r23, 0x00	; 0
     646:	50 40       	sbci	r21, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <OS_Abort+0x88>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <OS_Abort+0x92>
     64c:	00 00       	nop
     64e:	21 50       	subi	r18, 0x01	; 1
     650:	a9 f7       	brne	.-22     	; 0x63c <OS_Abort+0x82>
     652:	9f 5f       	subi	r25, 0xFF	; 255
     654:	e0 cf       	rjmp	.-64     	; 0x616 <OS_Abort+0x5c>
     656:	94 e1       	ldi	r25, 0x14	; 20
     658:	6f e7       	ldi	r22, 0x7F	; 127
     65a:	78 e3       	ldi	r23, 0x38	; 56
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	61 50       	subi	r22, 0x01	; 1
     660:	70 40       	sbci	r23, 0x00	; 0
     662:	20 40       	sbci	r18, 0x00	; 0
     664:	e1 f7       	brne	.-8      	; 0x65e <OS_Abort+0xa4>
     666:	00 c0       	rjmp	.+0      	; 0x668 <OS_Abort+0xae>
     668:	00 00       	nop
     66a:	91 50       	subi	r25, 0x01	; 1
     66c:	a9 f7       	brne	.-22     	; 0x658 <OS_Abort+0x9e>
     66e:	b7 cf       	rjmp	.-146    	; 0x5de <OS_Abort+0x24>

00000670 <_ZL18kernel_create_taskv>:
     670:	80 91 f7 02 	lds	r24, 0x02F7
     674:	90 91 f8 02 	lds	r25, 0x02F8
     678:	89 2b       	or	r24, r25
     67a:	09 f4       	brne	.+2      	; 0x67e <_ZL18kernel_create_taskv+0xe>
     67c:	b5 c0       	rjmp	.+362    	; 0x7e8 <_ZL18kernel_create_taskv+0x178>
     67e:	80 91 01 03 	lds	r24, 0x0301
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	f9 f4       	brne	.+62     	; 0x6c4 <_ZL18kernel_create_taskv+0x54>
     686:	80 91 08 03 	lds	r24, 0x0308
     68a:	90 91 09 03 	lds	r25, 0x0309
     68e:	89 2b       	or	r24, r25
     690:	09 f4       	brne	.+2      	; 0x694 <_ZL18kernel_create_taskv+0x24>
     692:	b0 c0       	rjmp	.+352    	; 0x7f4 <_ZL18kernel_create_taskv+0x184>
     694:	80 91 06 03 	lds	r24, 0x0306
     698:	90 91 07 03 	lds	r25, 0x0307
     69c:	89 2b       	or	r24, r25
     69e:	09 f4       	brne	.+2      	; 0x6a2 <_ZL18kernel_create_taskv+0x32>
     6a0:	a9 c0       	rjmp	.+338    	; 0x7f4 <_ZL18kernel_create_taskv+0x184>
     6a2:	80 91 0a 03 	lds	r24, 0x030A
     6a6:	90 91 0b 03 	lds	r25, 0x030B
     6aa:	20 91 08 03 	lds	r18, 0x0308
     6ae:	30 91 09 03 	lds	r19, 0x0309
     6b2:	80 91 06 03 	lds	r24, 0x0306
     6b6:	90 91 07 03 	lds	r25, 0x0307
     6ba:	82 17       	cp	r24, r18
     6bc:	93 07       	cpc	r25, r19
     6be:	10 f4       	brcc	.+4      	; 0x6c4 <_ZL18kernel_create_taskv+0x54>
     6c0:	83 e0       	ldi	r24, 0x03	; 3
     6c2:	99 c0       	rjmp	.+306    	; 0x7f6 <_ZL18kernel_create_taskv+0x186>
     6c4:	80 91 01 03 	lds	r24, 0x0301
     6c8:	88 23       	and	r24, r24
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <_ZL18kernel_create_taskv+0x66>
     6cc:	87 ef       	ldi	r24, 0xF7	; 247
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	f9 de       	rcall	.-526    	; 0x4c4 <_ZL7dequeueP7queue_t.isra.1>
     6d2:	bc 01       	movw	r22, r24
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <_ZL18kernel_create_taskv+0x6a>
     6d6:	6d ea       	ldi	r22, 0xAD	; 173
     6d8:	7b e0       	ldi	r23, 0x0B	; 11
     6da:	fb 01       	movw	r30, r22
     6dc:	e7 52       	subi	r30, 0x27	; 39
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	10 82       	st	Z, r1
     6e2:	80 e8       	ldi	r24, 0x80	; 128
     6e4:	7e 96       	adiw	r30, 0x1e	; 30
     6e6:	80 83       	st	Z, r24
     6e8:	33 96       	adiw	r30, 0x03	; 3
     6ea:	10 82       	st	Z, r1
     6ec:	80 91 fd 02 	lds	r24, 0x02FD
     6f0:	90 91 fe 02 	lds	r25, 0x02FE
     6f4:	31 96       	adiw	r30, 0x01	; 1
     6f6:	90 83       	st	Z, r25
     6f8:	80 91 fd 02 	lds	r24, 0x02FD
     6fc:	90 91 fe 02 	lds	r25, 0x02FE
     700:	31 96       	adiw	r30, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	31 96       	adiw	r30, 0x01	; 1
     706:	10 82       	st	Z, r1
     708:	88 e5       	ldi	r24, 0x58	; 88
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	90 83       	st	Z, r25
     710:	31 96       	adiw	r30, 0x01	; 1
     712:	80 83       	st	Z, r24
     714:	31 96       	adiw	r30, 0x01	; 1
     716:	cb 01       	movw	r24, r22
     718:	89 52       	subi	r24, 0x29	; 41
     71a:	9f 4f       	sbci	r25, 0xFF	; 255
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	3c 96       	adiw	r30, 0x0c	; 12
     724:	80 83       	st	Z, r24
     726:	80 91 ff 02 	lds	r24, 0x02FF
     72a:	90 91 00 03 	lds	r25, 0x0300
     72e:	31 96       	adiw	r30, 0x01	; 1
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	80 91 01 03 	lds	r24, 0x0301
     738:	32 96       	adiw	r30, 0x02	; 2
     73a:	80 83       	st	Z, r24
     73c:	80 91 06 03 	lds	r24, 0x0306
     740:	90 91 07 03 	lds	r25, 0x0307
     744:	39 97       	sbiw	r30, 0x09	; 9
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
     74a:	80 91 08 03 	lds	r24, 0x0308
     74e:	90 91 09 03 	lds	r25, 0x0309
     752:	32 96       	adiw	r30, 0x02	; 2
     754:	91 83       	std	Z+1, r25	; 0x01
     756:	80 83       	st	Z, r24
     758:	80 91 0a 03 	lds	r24, 0x030A
     75c:	90 91 0b 03 	lds	r25, 0x030B
     760:	32 96       	adiw	r30, 0x02	; 2
     762:	91 83       	std	Z+1, r25	; 0x01
     764:	80 83       	st	Z, r24
     766:	80 91 02 03 	lds	r24, 0x0302
     76a:	90 91 03 03 	lds	r25, 0x0303
     76e:	38 97       	sbiw	r30, 0x08	; 8
     770:	91 83       	std	Z+1, r25	; 0x01
     772:	80 83       	st	Z, r24
     774:	80 91 04 03 	lds	r24, 0x0304
     778:	90 91 05 03 	lds	r25, 0x0305
     77c:	32 96       	adiw	r30, 0x02	; 2
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24
     782:	80 91 01 03 	lds	r24, 0x0301
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	51 f0       	breq	.+20     	; 0x79e <_ZL18kernel_create_taskv+0x12e>
     78a:	83 30       	cpi	r24, 0x03	; 3
     78c:	29 f0       	breq	.+10     	; 0x798 <_ZL18kernel_create_taskv+0x128>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	71 f5       	brne	.+92     	; 0x7ee <_ZL18kernel_create_taskv+0x17e>
     792:	83 ef       	ldi	r24, 0xF3	; 243
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	26 c0       	rjmp	.+76     	; 0x7e4 <_ZL18kernel_create_taskv+0x174>
     798:	8b ee       	ldi	r24, 0xEB	; 235
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	23 c0       	rjmp	.+70     	; 0x7e4 <_ZL18kernel_create_taskv+0x174>
     79e:	fb 01       	movw	r30, r22
     7a0:	e0 5f       	subi	r30, 0xF0	; 240
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	11 82       	std	Z+1, r1	; 0x01
     7a6:	10 82       	st	Z, r1
     7a8:	80 91 ef 02 	lds	r24, 0x02EF
     7ac:	90 91 f0 02 	lds	r25, 0x02F0
     7b0:	32 96       	adiw	r30, 0x02	; 2
     7b2:	89 2b       	or	r24, r25
     7b4:	39 f4       	brne	.+14     	; 0x7c4 <_ZL18kernel_create_taskv+0x154>
     7b6:	11 82       	std	Z+1, r1	; 0x01
     7b8:	10 82       	st	Z, r1
     7ba:	70 93 f0 02 	sts	0x02F0, r23
     7be:	60 93 ef 02 	sts	0x02EF, r22
     7c2:	0b c0       	rjmp	.+22     	; 0x7da <_ZL18kernel_create_taskv+0x16a>
     7c4:	80 91 f1 02 	lds	r24, 0x02F1
     7c8:	90 91 f2 02 	lds	r25, 0x02F2
     7cc:	dc 01       	movw	r26, r24
     7ce:	a0 5f       	subi	r26, 0xF0	; 240
     7d0:	be 4f       	sbci	r27, 0xFE	; 254
     7d2:	6d 93       	st	X+, r22
     7d4:	7c 93       	st	X, r23
     7d6:	91 83       	std	Z+1, r25	; 0x01
     7d8:	80 83       	st	Z, r24
     7da:	70 93 f2 02 	sts	0x02F2, r23
     7de:	60 93 f1 02 	sts	0x02F1, r22
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <_ZL18kernel_create_taskv+0x17e>
     7e4:	4f de       	rcall	.-866    	; 0x484 <_ZL7enqueueP7queue_tP9td_struct>
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <_ZL18kernel_create_taskv+0x17e>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	08 95       	ret
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	08 95       	ret
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	80 93 00 02 	sts	0x0200, r24
     7fa:	df de       	rcall	.-578    	; 0x5ba <OS_Abort>

000007fc <_Z7OS_Initv>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	1f 92       	push	r1
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	80 91 81 00 	lds	r24, 0x0081
     80a:	82 60       	ori	r24, 0x02	; 2
     80c:	80 93 81 00 	sts	0x0081, r24
     810:	e9 e1       	ldi	r30, 0x19	; 25
     812:	f4 e0       	ldi	r31, 0x04	; 4
     814:	a5 e3       	ldi	r26, 0x35	; 53
     816:	b2 e0       	ldi	r27, 0x02	; 2
     818:	10 82       	st	Z, r1
     81a:	1d 92       	st	X+, r1
     81c:	1d 92       	st	X+, r1
     81e:	cf 01       	movw	r24, r30
     820:	08 96       	adiw	r24, 0x08	; 8
     822:	95 83       	std	Z+5, r25	; 0x05
     824:	84 83       	std	Z+4, r24	; 0x04
     826:	ec 5e       	subi	r30, 0xEC	; 236
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	2b e0       	ldi	r18, 0x0B	; 11
     82c:	e5 3a       	cpi	r30, 0xA5	; 165
     82e:	f2 07       	cpc	r31, r18
     830:	99 f7       	brne	.-26     	; 0x818 <_Z7OS_Initv+0x1c>
     832:	10 92 aa 0b 	sts	0x0BAA, r1
     836:	10 92 a9 0b 	sts	0x0BA9, r1
     83a:	0d e0       	ldi	r16, 0x0D	; 13
     83c:	13 e0       	ldi	r17, 0x03	; 3
     83e:	10 93 f8 02 	sts	0x02F8, r17
     842:	00 93 f7 02 	sts	0x02F7, r16
     846:	89 e9       	ldi	r24, 0x99	; 153
     848:	9a e0       	ldi	r25, 0x0A	; 10
     84a:	90 93 fa 02 	sts	0x02FA, r25
     84e:	80 93 f9 02 	sts	0x02F9, r24
     852:	8f e8       	ldi	r24, 0x8F	; 143
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	90 93 fe 02 	sts	0x02FE, r25
     85a:	80 93 fd 02 	sts	0x02FD, r24
     85e:	10 92 01 03 	sts	0x0301, r1
     862:	06 df       	rcall	.-500    	; 0x670 <_ZL18kernel_create_taskv>
     864:	89 e7       	ldi	r24, 0x79	; 121
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	90 93 fe 02 	sts	0x02FE, r25
     86c:	80 93 fd 02 	sts	0x02FD, r24
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	80 93 01 03 	sts	0x0301, r24
     876:	fc de       	rcall	.-520    	; 0x670 <_ZL18kernel_create_taskv>
     878:	10 93 c4 0c 	sts	0x0CC4, r17
     87c:	00 93 c3 0c 	sts	0x0CC3, r16
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 19 04 	sts	0x0419, r24
     886:	8b ee       	ldi	r24, 0xEB	; 235
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	1c de       	rcall	.-968    	; 0x4c4 <_ZL7dequeueP7queue_t.isra.1>
     88c:	80 91 6f 00 	lds	r24, 0x006F
     890:	82 60       	ori	r24, 0x02	; 2
     892:	80 93 6f 00 	sts	0x006F, r24
     896:	80 e1       	ldi	r24, 0x10	; 16
     898:	97 e2       	ldi	r25, 0x27	; 39
     89a:	90 93 89 00 	sts	0x0089, r25
     89e:	80 93 88 00 	sts	0x0088, r24
     8a2:	10 92 85 00 	sts	0x0085, r1
     8a6:	10 92 84 00 	sts	0x0084, r1
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	86 bb       	out	0x16, r24	; 22
     8ae:	ee 24       	eor	r14, r14
     8b0:	e3 94       	inc	r14
     8b2:	0d ea       	ldi	r16, 0xAD	; 173
     8b4:	1b e0       	ldi	r17, 0x0B	; 11
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	f8 2e       	mov	r15, r24
     8ba:	80 91 c3 0c 	lds	r24, 0x0CC3
     8be:	90 91 c4 0c 	lds	r25, 0x0CC4
     8c2:	fc 01       	movw	r30, r24
     8c4:	e4 5f       	subi	r30, 0xF4	; 244
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	20 81       	ld	r18, Z
     8ca:	21 30       	cpi	r18, 0x01	; 1
     8cc:	21 f4       	brne	.+8      	; 0x8d6 <_Z7OS_Initv+0xda>
     8ce:	8d 5a       	subi	r24, 0xAD	; 173
     8d0:	9b 40       	sbci	r25, 0x0B	; 11
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <_Z7OS_Initv+0xda>
     8d4:	57 c0       	rjmp	.+174    	; 0x984 <_Z7OS_Initv+0x188>
     8d6:	80 91 eb 02 	lds	r24, 0x02EB
     8da:	90 91 ec 02 	lds	r25, 0x02EC
     8de:	89 2b       	or	r24, r25
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <_Z7OS_Initv+0xec>
     8e2:	8b ee       	ldi	r24, 0xEB	; 235
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	3d c0       	rjmp	.+122    	; 0x962 <_Z7OS_Initv+0x166>
     8e8:	80 91 ef 02 	lds	r24, 0x02EF
     8ec:	90 91 f0 02 	lds	r25, 0x02F0
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	79 f1       	breq	.+94     	; 0x952 <_Z7OS_Initv+0x156>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	fc 01       	movw	r30, r24
     8fe:	ee 5f       	subi	r30, 0xFE	; 254
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	67 2b       	or	r22, r23
     908:	81 f4       	brne	.+32     	; 0x92a <_Z7OS_Initv+0x12e>
     90a:	dc 01       	movw	r26, r24
     90c:	aa 5f       	subi	r26, 0xFA	; 250
     90e:	be 4f       	sbci	r27, 0xFE	; 254
     910:	2d 91       	ld	r18, X+
     912:	3c 91       	ld	r19, X
     914:	31 83       	std	Z+1, r19	; 0x01
     916:	20 83       	st	Z, r18
     918:	36 96       	adiw	r30, 0x06	; 6
     91a:	20 81       	ld	r18, Z
     91c:	31 81       	ldd	r19, Z+1	; 0x01
     91e:	34 97       	sbiw	r30, 0x04	; 4
     920:	31 83       	std	Z+1, r19	; 0x01
     922:	20 83       	st	Z, r18
     924:	4f 5f       	subi	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	9c 01       	movw	r18, r24
     92a:	42 30       	cpi	r20, 0x02	; 2
     92c:	51 05       	cpc	r21, r1
     92e:	14 f0       	brlt	.+4      	; 0x934 <_Z7OS_Initv+0x138>
     930:	8b e0       	ldi	r24, 0x0B	; 11
     932:	66 c0       	rjmp	.+204    	; 0xa00 <_Z7OS_Initv+0x204>
     934:	fc 01       	movw	r30, r24
     936:	e0 5f       	subi	r30, 0xF0	; 240
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	e9 f6       	brne	.-70     	; 0x8fc <_Z7OS_Initv+0x100>
     942:	21 15       	cp	r18, r1
     944:	31 05       	cpc	r19, r1
     946:	29 f0       	breq	.+10     	; 0x952 <_Z7OS_Initv+0x156>
     948:	30 93 c4 0c 	sts	0x0CC4, r19
     94c:	20 93 c3 0c 	sts	0x0CC3, r18
     950:	12 c0       	rjmp	.+36     	; 0x976 <_Z7OS_Initv+0x17a>
     952:	80 91 f3 02 	lds	r24, 0x02F3
     956:	90 91 f4 02 	lds	r25, 0x02F4
     95a:	89 2b       	or	r24, r25
     95c:	41 f0       	breq	.+16     	; 0x96e <_Z7OS_Initv+0x172>
     95e:	83 ef       	ldi	r24, 0xF3	; 243
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	b0 dd       	rcall	.-1184   	; 0x4c4 <_ZL7dequeueP7queue_t.isra.1>
     964:	90 93 c4 0c 	sts	0x0CC4, r25
     968:	80 93 c3 0c 	sts	0x0CC3, r24
     96c:	04 c0       	rjmp	.+8      	; 0x976 <_Z7OS_Initv+0x17a>
     96e:	10 93 c4 0c 	sts	0x0CC4, r17
     972:	00 93 c3 0c 	sts	0x0CC3, r16
     976:	e0 91 c3 0c 	lds	r30, 0x0CC3
     97a:	f0 91 c4 0c 	lds	r31, 0x0CC4
     97e:	e4 5f       	subi	r30, 0xF4	; 244
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	e0 82       	st	Z, r14
     984:	cd dc       	rcall	.-1638   	; 0x320 <_ZL11exit_kernelv>
     986:	20 91 0c 03 	lds	r18, 0x030C
     98a:	22 30       	cpi	r18, 0x02	; 2
     98c:	09 f4       	brne	.+2      	; 0x990 <_Z7OS_Initv+0x194>
     98e:	5b c0       	rjmp	.+182    	; 0xa46 <_Z7OS_Initv+0x24a>
     990:	c0 90 c3 0c 	lds	r12, 0x0CC3
     994:	d0 90 c4 0c 	lds	r13, 0x0CC4
     998:	23 30       	cpi	r18, 0x03	; 3
     99a:	30 f4       	brcc	.+12     	; 0x9a8 <_Z7OS_Initv+0x1ac>
     99c:	22 23       	and	r18, r18
     99e:	09 f4       	brne	.+2      	; 0x9a2 <_Z7OS_Initv+0x1a6>
     9a0:	ec c0       	rjmp	.+472    	; 0xb7a <_Z7OS_Initv+0x37e>
     9a2:	21 30       	cpi	r18, 0x01	; 1
     9a4:	51 f0       	breq	.+20     	; 0x9ba <_Z7OS_Initv+0x1be>
     9a6:	e1 c0       	rjmp	.+450    	; 0xb6a <_Z7OS_Initv+0x36e>
     9a8:	24 30       	cpi	r18, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <_Z7OS_Initv+0x1b2>
     9ac:	c9 c0       	rjmp	.+402    	; 0xb40 <_Z7OS_Initv+0x344>
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <_Z7OS_Initv+0x1b6>
     9b0:	6a c0       	rjmp	.+212    	; 0xa86 <_Z7OS_Initv+0x28a>
     9b2:	25 30       	cpi	r18, 0x05	; 5
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <_Z7OS_Initv+0x1bc>
     9b6:	e1 c0       	rjmp	.+450    	; 0xb7a <_Z7OS_Initv+0x37e>
     9b8:	d8 c0       	rjmp	.+432    	; 0xb6a <_Z7OS_Initv+0x36e>
     9ba:	80 91 84 00 	lds	r24, 0x0084
     9be:	90 91 85 00 	lds	r25, 0x0085
     9c2:	90 93 48 02 	sts	0x0248, r25
     9c6:	80 93 47 02 	sts	0x0247, r24
     9ca:	80 91 49 02 	lds	r24, 0x0249
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	80 93 49 02 	sts	0x0249, r24
     9d4:	f6 01       	movw	r30, r12
     9d6:	e1 5f       	subi	r30, 0xF1	; 241
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	40 81       	ld	r20, Z
     9dc:	42 30       	cpi	r20, 0x02	; 2
     9de:	99 f4       	brne	.+38     	; 0xa06 <_Z7OS_Initv+0x20a>
     9e0:	33 97       	sbiw	r30, 0x03	; 3
     9e2:	80 81       	ld	r24, Z
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	79 f4       	brne	.+30     	; 0xa06 <_Z7OS_Initv+0x20a>
     9e8:	38 97       	sbiw	r30, 0x08	; 8
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	91 83       	std	Z+1, r25	; 0x01
     9f2:	80 83       	st	Z, r24
     9f4:	34 96       	adiw	r30, 0x04	; 4
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	89 2b       	or	r24, r25
     9fc:	21 f4       	brne	.+8      	; 0xa06 <_Z7OS_Initv+0x20a>
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	80 93 00 02 	sts	0x0200, r24
     a04:	da dd       	rcall	.-1100   	; 0x5ba <OS_Abort>
     a06:	80 91 ef 02 	lds	r24, 0x02EF
     a0a:	90 91 f0 02 	lds	r25, 0x02F0
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	69 f0       	breq	.+26     	; 0xa2c <_Z7OS_Initv+0x230>
     a12:	fc 01       	movw	r30, r24
     a14:	ee 5f       	subi	r30, 0xFE	; 254
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	20 81       	ld	r18, Z
     a1a:	31 81       	ldd	r19, Z+1	; 0x01
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	31 09       	sbc	r19, r1
     a20:	31 83       	std	Z+1, r19	; 0x01
     a22:	20 83       	st	Z, r18
     a24:	3e 96       	adiw	r30, 0x0e	; 14
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	f1 cf       	rjmp	.-30     	; 0xa0e <_Z7OS_Initv+0x212>
     a2c:	41 30       	cpi	r20, 0x01	; 1
     a2e:	09 f0       	breq	.+2      	; 0xa32 <_Z7OS_Initv+0x236>
     a30:	a4 c0       	rjmp	.+328    	; 0xb7a <_Z7OS_Initv+0x37e>
     a32:	f6 01       	movw	r30, r12
     a34:	e4 5f       	subi	r30, 0xF4	; 244
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	80 81       	ld	r24, Z
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <_Z7OS_Initv+0x244>
     a3e:	9d c0       	rjmp	.+314    	; 0xb7a <_Z7OS_Initv+0x37e>
     a40:	f0 82       	st	Z, r15
     a42:	b6 01       	movw	r22, r12
     a44:	a7 c0       	rjmp	.+334    	; 0xb94 <_Z7OS_Initv+0x398>
     a46:	29 83       	std	Y+1, r18	; 0x01
     a48:	13 de       	rcall	.-986    	; 0x670 <_ZL18kernel_create_taskv>
     a4a:	90 93 fc 02 	sts	0x02FC, r25
     a4e:	80 93 fb 02 	sts	0x02FB, r24
     a52:	80 91 fb 02 	lds	r24, 0x02FB
     a56:	90 91 fc 02 	lds	r25, 0x02FC
     a5a:	29 81       	ldd	r18, Y+1	; 0x01
     a5c:	89 2b       	or	r24, r25
     a5e:	89 f0       	breq	.+34     	; 0xa82 <_Z7OS_Initv+0x286>
     a60:	60 91 c3 0c 	lds	r22, 0x0CC3
     a64:	70 91 c4 0c 	lds	r23, 0x0CC4
     a68:	fb 01       	movw	r30, r22
     a6a:	e1 5f       	subi	r30, 0xF1	; 241
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
     a6e:	80 81       	ld	r24, Z
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	09 f4       	brne	.+2      	; 0xa76 <_Z7OS_Initv+0x27a>
     a74:	82 c0       	rjmp	.+260    	; 0xb7a <_Z7OS_Initv+0x37e>
     a76:	90 91 01 03 	lds	r25, 0x0301
     a7a:	93 30       	cpi	r25, 0x03	; 3
     a7c:	09 f0       	breq	.+2      	; 0xa80 <_Z7OS_Initv+0x284>
     a7e:	80 c0       	rjmp	.+256    	; 0xb80 <_Z7OS_Initv+0x384>
     a80:	76 c0       	rjmp	.+236    	; 0xb6e <_Z7OS_Initv+0x372>
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	bd cf       	rjmp	.-134    	; 0xa00 <_Z7OS_Initv+0x204>
     a86:	fd ea       	ldi	r31, 0xAD	; 173
     a88:	cf 16       	cp	r12, r31
     a8a:	fb e0       	ldi	r31, 0x0B	; 11
     a8c:	df 06       	cpc	r13, r31
     a8e:	09 f4       	brne	.+2      	; 0xa92 <_Z7OS_Initv+0x296>
     a90:	74 c0       	rjmp	.+232    	; 0xb7a <_Z7OS_Initv+0x37e>
     a92:	f6 01       	movw	r30, r12
     a94:	e4 5f       	subi	r30, 0xF4	; 244
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	10 82       	st	Z, r1
     a9a:	33 96       	adiw	r30, 0x03	; 3
     a9c:	80 81       	ld	r24, Z
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <_Z7OS_Initv+0x2a8>
     aa2:	4a c0       	rjmp	.+148    	; 0xb38 <_Z7OS_Initv+0x33c>
     aa4:	20 91 ef 02 	lds	r18, 0x02EF
     aa8:	30 91 f0 02 	lds	r19, 0x02F0
     aac:	2c 15       	cp	r18, r12
     aae:	3d 05       	cpc	r19, r13
     ab0:	69 f4       	brne	.+26     	; 0xacc <_Z7OS_Initv+0x2d0>
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	41 f0       	breq	.+16     	; 0xacc <_Z7OS_Initv+0x2d0>
     abc:	90 93 f0 02 	sts	0x02F0, r25
     ac0:	80 93 ef 02 	sts	0x02EF, r24
     ac4:	fc 01       	movw	r30, r24
     ac6:	ee 5e       	subi	r30, 0xEE	; 238
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	15 c0       	rjmp	.+42     	; 0xaf6 <_Z7OS_Initv+0x2fa>
     acc:	80 91 f1 02 	lds	r24, 0x02F1
     ad0:	90 91 f2 02 	lds	r25, 0x02F2
     ad4:	f6 01       	movw	r30, r12
     ad6:	ee 5e       	subi	r30, 0xEE	; 238
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	8c 15       	cp	r24, r12
     adc:	9d 05       	cpc	r25, r13
     ade:	d1 f4       	brne	.+52     	; 0xb14 <_Z7OS_Initv+0x318>
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	51 f0       	breq	.+20     	; 0xafc <_Z7OS_Initv+0x300>
     ae8:	90 93 f2 02 	sts	0x02F2, r25
     aec:	80 93 f1 02 	sts	0x02F1, r24
     af0:	fc 01       	movw	r30, r24
     af2:	e0 5f       	subi	r30, 0xF0	; 240
     af4:	fe 4f       	sbci	r31, 0xFE	; 254
     af6:	11 82       	std	Z+1, r1	; 0x01
     af8:	10 82       	st	Z, r1
     afa:	1e c0       	rjmp	.+60     	; 0xb38 <_Z7OS_Initv+0x33c>
     afc:	2c 15       	cp	r18, r12
     afe:	3d 05       	cpc	r19, r13
     b00:	49 f4       	brne	.+18     	; 0xb14 <_Z7OS_Initv+0x318>
     b02:	10 92 f2 02 	sts	0x02F2, r1
     b06:	10 92 f1 02 	sts	0x02F1, r1
     b0a:	10 92 f0 02 	sts	0x02F0, r1
     b0e:	10 92 ef 02 	sts	0x02EF, r1
     b12:	12 c0       	rjmp	.+36     	; 0xb38 <_Z7OS_Initv+0x33c>
     b14:	80 81       	ld	r24, Z
     b16:	91 81       	ldd	r25, Z+1	; 0x01
     b18:	fc 01       	movw	r30, r24
     b1a:	e0 5f       	subi	r30, 0xF0	; 240
     b1c:	fe 4f       	sbci	r31, 0xFE	; 254
     b1e:	a0 81       	ld	r26, Z
     b20:	b1 81       	ldd	r27, Z+1	; 0x01
     b22:	a0 5f       	subi	r26, 0xF0	; 240
     b24:	be 4f       	sbci	r27, 0xFE	; 254
     b26:	2d 91       	ld	r18, X+
     b28:	3c 91       	ld	r19, X
     b2a:	31 83       	std	Z+1, r19	; 0x01
     b2c:	20 83       	st	Z, r18
     b2e:	f9 01       	movw	r30, r18
     b30:	ee 5e       	subi	r30, 0xEE	; 238
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	91 83       	std	Z+1, r25	; 0x01
     b36:	80 83       	st	Z, r24
     b38:	b6 01       	movw	r22, r12
     b3a:	87 ef       	ldi	r24, 0xF7	; 247
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	2c c0       	rjmp	.+88     	; 0xb98 <_Z7OS_Initv+0x39c>
     b40:	f6 01       	movw	r30, r12
     b42:	e1 5f       	subi	r30, 0xF1	; 241
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	80 81       	ld	r24, Z
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	31 f0       	breq	.+12     	; 0xb58 <_Z7OS_Initv+0x35c>
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	41 f4       	brne	.+16     	; 0xb60 <_Z7OS_Initv+0x364>
     b50:	b6 01       	movw	r22, r12
     b52:	8b ee       	ldi	r24, 0xEB	; 235
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <_Z7OS_Initv+0x362>
     b58:	b6 01       	movw	r22, r12
     b5a:	83 ef       	ldi	r24, 0xF3	; 243
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	92 dc       	rcall	.-1756   	; 0x484 <_ZL7enqueueP7queue_tP9td_struct>
     b60:	f6 01       	movw	r30, r12
     b62:	e4 5f       	subi	r30, 0xF4	; 244
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	f0 82       	st	Z, r15
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <_Z7OS_Initv+0x37e>
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	49 cf       	rjmp	.-366    	; 0xa00 <_Z7OS_Initv+0x204>
     b6e:	fb 01       	movw	r30, r22
     b70:	e4 5f       	subi	r30, 0xF4	; 244
     b72:	fe 4f       	sbci	r31, 0xFE	; 254
     b74:	20 83       	st	Z, r18
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	69 f0       	breq	.+26     	; 0xb94 <_Z7OS_Initv+0x398>
     b7a:	10 92 0c 03 	sts	0x030C, r1
     b7e:	9d ce       	rjmp	.-710    	; 0x8ba <_Z7OS_Initv+0xbe>
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	d9 f7       	brne	.-10     	; 0xb7a <_Z7OS_Initv+0x37e>
     b84:	80 91 01 03 	lds	r24, 0x0301
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	b9 f7       	brne	.-18     	; 0xb7a <_Z7OS_Initv+0x37e>
     b8c:	fb 01       	movw	r30, r22
     b8e:	e4 5f       	subi	r30, 0xF4	; 244
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 83       	st	Z, r24
     b94:	83 ef       	ldi	r24, 0xF3	; 243
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	75 dc       	rcall	.-1814   	; 0x484 <_ZL7enqueueP7queue_tP9td_struct>
     b9a:	ef cf       	rjmp	.-34     	; 0xb7a <_Z7OS_Initv+0x37e>

00000b9c <Service_Init>:
     b9c:	9f b7       	in	r25, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	80 91 4a 02 	lds	r24, 0x024A
     ba4:	8a 30       	cpi	r24, 0x0A	; 10
     ba6:	a8 f4       	brcc	.+42     	; 0xbd2 <Service_Init+0x36>
     ba8:	20 e1       	ldi	r18, 0x10	; 16
     baa:	82 9f       	mul	r24, r18
     bac:	f0 01       	movw	r30, r0
     bae:	11 24       	eor	r1, r1
     bb0:	e5 5b       	subi	r30, 0xB5	; 181
     bb2:	fd 4f       	sbci	r31, 0xFD	; 253
     bb4:	17 86       	std	Z+15, r1	; 0x0f
     bb6:	16 86       	std	Z+14, r1	; 0x0e
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	80 93 4a 02 	sts	0x024A, r24
     bbe:	9f bf       	out	0x3f, r25	; 63
     bc0:	80 91 4a 02 	lds	r24, 0x024A
     bc4:	20 e1       	ldi	r18, 0x10	; 16
     bc6:	82 9f       	mul	r24, r18
     bc8:	c0 01       	movw	r24, r0
     bca:	11 24       	eor	r1, r1
     bcc:	85 5c       	subi	r24, 0xC5	; 197
     bce:	9d 4f       	sbci	r25, 0xFD	; 253
     bd0:	08 95       	ret
     bd2:	8e e0       	ldi	r24, 0x0E	; 14
     bd4:	80 93 00 02 	sts	0x0200, r24
     bd8:	f0 dc       	rcall	.-1568   	; 0x5ba <OS_Abort>

00000bda <Service_Subscribe>:
     bda:	cf 93       	push	r28
     bdc:	cf b7       	in	r28, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	20 91 c3 0c 	lds	r18, 0x0CC3
     be4:	30 91 c4 0c 	lds	r19, 0x0CC4
     be8:	f9 01       	movw	r30, r18
     bea:	e1 5f       	subi	r30, 0xF1	; 241
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	40 81       	ld	r20, Z
     bf0:	42 30       	cpi	r20, 0x02	; 2
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <Service_Subscribe+0x1e>
     bf4:	8d e0       	ldi	r24, 0x0D	; 13
     bf6:	1f c0       	rjmp	.+62     	; 0xc36 <Service_Subscribe+0x5c>
     bf8:	fc 01       	movw	r30, r24
     bfa:	46 85       	ldd	r20, Z+14	; 0x0e
     bfc:	57 85       	ldd	r21, Z+15	; 0x0f
     bfe:	43 30       	cpi	r20, 0x03	; 3
     c00:	51 05       	cpc	r21, r1
     c02:	c4 f4       	brge	.+48     	; 0xc34 <Service_Subscribe+0x5a>
     c04:	fa 01       	movw	r30, r20
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	e8 0f       	add	r30, r24
     c0c:	f9 1f       	adc	r31, r25
     c0e:	31 83       	std	Z+1, r19	; 0x01
     c10:	20 83       	st	Z, r18
     c12:	77 83       	std	Z+7, r23	; 0x07
     c14:	66 83       	std	Z+6, r22	; 0x06
     c16:	4f 5f       	subi	r20, 0xFF	; 255
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	fc 01       	movw	r30, r24
     c1c:	57 87       	std	Z+15, r21	; 0x0f
     c1e:	46 87       	std	Z+14, r20	; 0x0e
     c20:	f9 01       	movw	r30, r18
     c22:	e4 5f       	subi	r30, 0xF4	; 244
     c24:	fe 4f       	sbci	r31, 0xFE	; 254
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	80 83       	st	Z, r24
     c2a:	cf bf       	out	0x3f, r28	; 63
     c2c:	d2 db       	rcall	.-2140   	; 0x3d2 <_ZL12enter_kernelv>
     c2e:	cf bf       	out	0x3f, r28	; 63
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret
     c34:	8c e0       	ldi	r24, 0x0C	; 12
     c36:	80 93 00 02 	sts	0x0200, r24
     c3a:	bf dc       	rcall	.-1666   	; 0x5ba <OS_Abort>

00000c3c <Service_Publish>:
     c3c:	af 92       	push	r10
     c3e:	bf 92       	push	r11
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	6b 01       	movw	r12, r22
     c54:	af b6       	in	r10, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	7d 87       	std	Y+13, r23	; 0x0d
     c5a:	6c 87       	std	Y+12, r22	; 0x0c
     c5c:	7c 01       	movw	r14, r24
     c5e:	00 e0       	ldi	r16, 0x00	; 0
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	b2 e0       	ldi	r27, 0x02	; 2
     c64:	bb 2e       	mov	r11, r27
     c66:	8e 85       	ldd	r24, Y+14	; 0x0e
     c68:	9f 85       	ldd	r25, Y+15	; 0x0f
     c6a:	08 17       	cp	r16, r24
     c6c:	19 07       	cpc	r17, r25
     c6e:	c4 f5       	brge	.+112    	; 0xce0 <Service_Publish+0xa4>
     c70:	d7 01       	movw	r26, r14
     c72:	16 96       	adiw	r26, 0x06	; 6
     c74:	ed 91       	ld	r30, X+
     c76:	fc 91       	ld	r31, X
     c78:	17 97       	sbiw	r26, 0x07	; 7
     c7a:	d1 82       	std	Z+1, r13	; 0x01
     c7c:	c0 82       	st	Z, r12
     c7e:	f7 01       	movw	r30, r14
     c80:	61 91       	ld	r22, Z+
     c82:	71 91       	ld	r23, Z+
     c84:	7f 01       	movw	r14, r30
     c86:	fb 01       	movw	r30, r22
     c88:	e4 5f       	subi	r30, 0xF4	; 244
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	b0 82       	st	Z, r11
     c8e:	33 96       	adiw	r30, 0x03	; 3
     c90:	80 81       	ld	r24, Z
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	b9 f4       	brne	.+46     	; 0xcc4 <Service_Publish+0x88>
     c96:	8b ee       	ldi	r24, 0xEB	; 235
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	f4 db       	rcall	.-2072   	; 0x484 <_ZL7enqueueP7queue_tP9td_struct>
     c9c:	60 91 c3 0c 	lds	r22, 0x0CC3
     ca0:	70 91 c4 0c 	lds	r23, 0x0CC4
     ca4:	fb 01       	movw	r30, r22
     ca6:	e1 5f       	subi	r30, 0xF1	; 241
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	80 81       	ld	r24, Z
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	19 f4       	brne	.+6      	; 0xcb6 <Service_Publish+0x7a>
     cb0:	33 97       	sbiw	r30, 0x03	; 3
     cb2:	b0 82       	st	Z, r11
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <Service_Publish+0x98>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	81 f4       	brne	.+32     	; 0xcda <Service_Publish+0x9e>
     cba:	fb 01       	movw	r30, r22
     cbc:	e4 5f       	subi	r30, 0xF4	; 244
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	80 83       	st	Z, r24
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <Service_Publish+0x9e>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <Service_Publish+0x94>
     cc8:	8a e0       	ldi	r24, 0x0A	; 10
     cca:	80 93 00 02 	sts	0x0200, r24
     cce:	75 dc       	rcall	.-1814   	; 0x5ba <OS_Abort>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	19 f4       	brne	.+6      	; 0xcda <Service_Publish+0x9e>
     cd4:	83 ef       	ldi	r24, 0xF3	; 243
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	d5 db       	rcall	.-2134   	; 0x484 <_ZL7enqueueP7queue_tP9td_struct>
     cda:	0f 5f       	subi	r16, 0xFF	; 255
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	c3 cf       	rjmp	.-122    	; 0xc66 <Service_Publish+0x2a>
     ce0:	1f 86       	std	Y+15, r1	; 0x0f
     ce2:	1e 86       	std	Y+14, r1	; 0x0e
     ce4:	76 db       	rcall	.-2324   	; 0x3d2 <_ZL12enter_kernelv>
     ce6:	af be       	out	0x3f, r10	; 63
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	08 95       	ret

00000cfe <Task_Create_System>:
     cfe:	cf 93       	push	r28
     d00:	cf b7       	in	r28, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	90 93 fe 02 	sts	0x02FE, r25
     d08:	80 93 fd 02 	sts	0x02FD, r24
     d0c:	70 93 00 03 	sts	0x0300, r23
     d10:	60 93 ff 02 	sts	0x02FF, r22
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	80 93 01 03 	sts	0x0301, r24
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	80 93 0c 03 	sts	0x030C, r24
     d20:	58 db       	rcall	.-2384   	; 0x3d2 <_ZL12enter_kernelv>
     d22:	80 91 fb 02 	lds	r24, 0x02FB
     d26:	90 91 fc 02 	lds	r25, 0x02FC
     d2a:	cf bf       	out	0x3f, r28	; 63
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <Task_Create_RR>:
     d30:	cf 93       	push	r28
     d32:	cf b7       	in	r28, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	90 93 fe 02 	sts	0x02FE, r25
     d3a:	80 93 fd 02 	sts	0x02FD, r24
     d3e:	70 93 00 03 	sts	0x0300, r23
     d42:	60 93 ff 02 	sts	0x02FF, r22
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 93 01 03 	sts	0x0301, r24
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	80 93 0c 03 	sts	0x030C, r24
     d52:	3f db       	rcall	.-2434   	; 0x3d2 <_ZL12enter_kernelv>
     d54:	80 91 fb 02 	lds	r24, 0x02FB
     d58:	90 91 fc 02 	lds	r25, 0x02FC
     d5c:	cf bf       	out	0x3f, r28	; 63
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <Task_Create_Periodic>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	cf b7       	in	r28, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	90 93 fe 02 	sts	0x02FE, r25
     d70:	80 93 fd 02 	sts	0x02FD, r24
     d74:	70 93 00 03 	sts	0x0300, r23
     d78:	60 93 ff 02 	sts	0x02FF, r22
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	80 93 01 03 	sts	0x0301, r24
     d82:	50 93 07 03 	sts	0x0307, r21
     d86:	40 93 06 03 	sts	0x0306, r20
     d8a:	30 93 09 03 	sts	0x0309, r19
     d8e:	20 93 08 03 	sts	0x0308, r18
     d92:	10 93 0b 03 	sts	0x030B, r17
     d96:	00 93 0a 03 	sts	0x030A, r16
     d9a:	10 93 03 03 	sts	0x0303, r17
     d9e:	00 93 02 03 	sts	0x0302, r16
     da2:	30 93 05 03 	sts	0x0305, r19
     da6:	20 93 04 03 	sts	0x0304, r18
     daa:	80 93 0c 03 	sts	0x030C, r24
     dae:	11 db       	rcall	.-2526   	; 0x3d2 <_ZL12enter_kernelv>
     db0:	80 91 fb 02 	lds	r24, 0x02FB
     db4:	90 91 fc 02 	lds	r25, 0x02FC
     db8:	cf bf       	out	0x3f, r28	; 63
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <Task_Next>:
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	1f 92       	push	r1
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	8f b7       	in	r24, 0x3f	; 63
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	f8 94       	cli
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	80 93 0c 03 	sts	0x030C, r24
     dd8:	fc da       	rcall	.-2568   	; 0x3d2 <_ZL12enter_kernelv>
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f bf       	out	0x3f, r24	; 63
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <main>:
int main()
{
    //DDRB = (_BV(PB5));
	//PORTB &= ~_BV(PB5);

	OS_Init();
     de6:	0a dd       	rcall	.-1516   	; 0x7fc <_Z7OS_Initv>

00000de8 <_Z18send_recieve_radiov>:
		PORTH |= (uint8_t)(_BV(PH4));
		PORTH &= ~(uint8_t)(_BV(PH3));
	}
}

void send_recieve_radio(){
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	a2 97       	sbiw	r28, 0x22	; 34
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (_BV(PB7));
     dfc:	27 9a       	sbi	0x04, 7	; 4
	PORTB = 0;
     dfe:	15 b8       	out	0x05, r1	; 5
	RADIO_TX_STATUS radio_status_send;
	RADIO_RX_STATUS radio_status;
	radiopacket_t radio_packet;
	pf_roombastate_t pk_roomba_state;
	int16_t radio_receive_service_value;
	Radio_Set_Tx_Addr(BASE_ADDRESS);
     e00:	88 e1       	ldi	r24, 0x18	; 24
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	3c d3       	rcall	.+1656   	; 0x147e <_Z17Radio_Set_Tx_AddrPh>
		radio_status = Radio_Receive(&radio_packet);
		PORTE |= (uint8_t)(_BV(PE3)); 
		while(radio_status == RADIO_RX_MORE_PACKETS || radio_status == RADIO_RX_SUCCESS){
			uint8_t radio_roomba_state = radio_packet.payload.gamestate.roomba_states[roomba_identity];
			
			current_game_state = radio_packet.payload.gamestate;
     e06:	15 e0       	ldi	r17, 0x05	; 5
						roomba_state = radio_roomba_state; // transition from end game to start new game
					} else {
						pk_roomba_state.roomba_id = roomba_identity;
						pk_roomba_state.roomba_state = roomba_state;
						memcpy(&radio_packet.payload.roombastate, &pk_roomba_state, sizeof(pf_roombastate_t));
						radio_packet.type = ROOMBASTATE_PACKET;
     e08:	01 e0       	ldi	r16, 0x01	; 1
	int16_t radio_receive_service_value;
	Radio_Set_Tx_Addr(BASE_ADDRESS);

	for(;;){
 
		Service_Subscribe(radio_send_receive_service, &radio_receive_service_value);
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5d       	subi	r22, 0xDF	; 223
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	80 91 32 0d 	lds	r24, 0x0D32
     e14:	90 91 33 0d 	lds	r25, 0x0D33
     e18:	e0 de       	rcall	.-576    	; 0xbda <Service_Subscribe>
		// RADIO_RX_MORE_PACKETS: more packets exists (4 total at start)
		// RADIO_RX_SUCCESS: all packets have been read
		radio_status = Radio_Receive(&radio_packet);
     e1a:	ce 01       	movw	r24, r28
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	b8 d3       	rcall	.+1904   	; 0x1590 <_Z13Radio_ReceiveP3_rp>
		PORTE |= (uint8_t)(_BV(PE3)); 
     e20:	73 9a       	sbi	0x0e, 3	; 14
		while(radio_status == RADIO_RX_MORE_PACKETS || radio_status == RADIO_RX_SUCCESS){
     e22:	83 50       	subi	r24, 0x03	; 3
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	88 f7       	brcc	.-30     	; 0xe0a <_Z18send_recieve_radiov+0x22>
			uint8_t radio_roomba_state = radio_packet.payload.gamestate.roomba_states[roomba_identity];
     e28:	20 91 30 0d 	lds	r18, 0x0D30
     e2c:	e5 e0       	ldi	r30, 0x05	; 5
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ec 0f       	add	r30, r28
     e32:	fd 1f       	adc	r31, r29
     e34:	e2 0f       	add	r30, r18
     e36:	f1 1d       	adc	r31, r1
     e38:	80 81       	ld	r24, Z
			
			current_game_state = radio_packet.payload.gamestate;
     e3a:	fe 01       	movw	r30, r28
     e3c:	34 96       	adiw	r30, 0x04	; 4
     e3e:	a5 ec       	ldi	r26, 0xC5	; 197
     e40:	bc e0       	ldi	r27, 0x0C	; 12
     e42:	91 2f       	mov	r25, r17
     e44:	01 90       	ld	r0, Z+
     e46:	0d 92       	st	X+, r0
     e48:	9a 95       	dec	r25
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <_Z18send_recieve_radiov+0x5c>
			
			if(radio_packet.type != GAMESTATE_PACKET){
     e4c:	99 81       	ldd	r25, Y+1	; 0x01
     e4e:	91 11       	cpse	r25, r1
     e50:	dc cf       	rjmp	.-72     	; 0xe0a <_Z18send_recieve_radiov+0x22>
				break;		
			}
			if(radio_roomba_state != roomba_state){
     e52:	90 91 31 0d 	lds	r25, 0x0D31
     e56:	89 17       	cp	r24, r25
     e58:	71 f0       	breq	.+28     	; 0xe76 <_Z18send_recieve_radiov+0x8e>
				if((radio_roomba_state & FORCED) == 0){
     e5a:	81 fd       	sbrc	r24, 1
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <_Z18send_recieve_radiov+0x8a>
					if((roomba_state & FORCED) > 0){
     e5e:	91 fd       	sbrc	r25, 1
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <_Z18send_recieve_radiov+0x8a>
						roomba_state = radio_roomba_state; // transition from end game to start new game
					} else {
						pk_roomba_state.roomba_id = roomba_identity;
						pk_roomba_state.roomba_state = roomba_state;
						memcpy(&radio_packet.payload.roombastate, &pk_roomba_state, sizeof(pf_roombastate_t));
     e62:	2c 83       	std	Y+4, r18	; 0x04
     e64:	9d 83       	std	Y+5, r25	; 0x05
						radio_packet.type = ROOMBASTATE_PACKET;
     e66:	09 83       	std	Y+1, r16	; 0x01
						radio_status_send = Radio_Transmit(&radio_packet, RADIO_RETURN_ON_TX); // !!!!!!!!!!!! may need to change radio_status variable !!!!!!!!!!!!!!!!!!!!
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	41 d3       	rcall	.+1666   	; 0x14f2 <_Z14Radio_TransmitP3_rp14_radio_tx_wait>
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <_Z18send_recieve_radiov+0x8e>
						(void)radio_status_send; //Removed unused warning. :P
					}
				} else {
					roomba_state = radio_roomba_state;
     e72:	80 93 31 0d 	sts	0x0D31, r24
				}
			}
			radio_status = Radio_Receive(&radio_packet);
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	8a d3       	rcall	.+1812   	; 0x1590 <_Z13Radio_ReceiveP3_rp>
     e7c:	d2 cf       	rjmp	.-92     	; 0xe22 <_Z18send_recieve_radiov+0x3a>

00000e7e <_Z18Send_Drive_Commandv>:
							roomba_velocity = 100;
							roomba_rotation = -1;
						}
						//left light sensor
						else if (roomba_light_sensor_packet.light_bumber & 0x1 || roomba_light_sensor_packet.light_bumber & 0x2 || roomba_light_sensor_packet.light_bumber & 0x3){
							roomba_velocity = 240;
     e7e:	c0 ef       	ldi	r28, 0xF0	; 240
     e80:	d0 e0       	ldi	r29, 0x00	; 0
							roomba_rotation = 100;
     e82:	04 e6       	ldi	r16, 0x64	; 100
     e84:	10 e0       	ldi	r17, 0x00	; 0
						}
						//right light sensor
						else if (roomba_light_sensor_packet.light_bumber & 0x6 || roomba_light_sensor_packet.light_bumber & 0x5 || roomba_light_sensor_packet.light_bumber & 0x4){
							roomba_velocity = 240;
							roomba_rotation = -100;
     e86:	8c e9       	ldi	r24, 0x9C	; 156
     e88:	c8 2e       	mov	r12, r24
     e8a:	dd 24       	eor	r13, r13
     e8c:	da 94       	dec	r13
							roomba_velocity = 100;
							roomba_rotation = 1;
						} else if (roomba_bumper_sensor_packet.bumps_wheeldrops & 0x2)
						{
							roomba_velocity = 100;
							roomba_rotation = -1;
     e8e:	ee 24       	eor	r14, r14
     e90:	ea 94       	dec	r14
     e92:	fe 2c       	mov	r15, r14
						Roomba_UpdateSensorPacket(LIGHT_SENSOR, &roomba_light_sensor_packet); // updates the light sensors of the bot

						if(roomba_bumper_sensor_packet.bumps_wheeldrops & 0x1)
						{
							roomba_velocity = 100;
							roomba_rotation = 1;
     e94:	aa 24       	eor	r10, r10
     e96:	a3 94       	inc	r10
     e98:	b1 2c       	mov	r11, r1
}

void Send_Drive_Command(){
	for(;;) {
		
		switch(current_game_state.game_state){
     e9a:	80 91 c5 0c 	lds	r24, 0x0CC5
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	31 f0       	breq	.+12     	; 0xeae <_Z18Send_Drive_Commandv+0x30>
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <_Z18Send_Drive_Commandv+0x28>
     ea4:	54 c0       	rjmp	.+168    	; 0xf4e <_Z18Send_Drive_Commandv+0xd0>
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	09 f4       	brne	.+2      	; 0xeac <_Z18Send_Drive_Commandv+0x2e>
     eaa:	5e c0       	rjmp	.+188    	; 0xf68 <_Z18Send_Drive_Commandv+0xea>
     eac:	f8 cf       	rjmp	.-16     	; 0xe9e <_Z18Send_Drive_Commandv+0x20>
				Task_Next();
				break;
			
			case GAME_RUNNING:
				
				if((roomba_state & DEAD) == 0){ // If roomba alive
     eae:	80 91 31 0d 	lds	r24, 0x0D31
     eb2:	80 fd       	sbrc	r24, 0
     eb4:	4c c0       	rjmp	.+152    	; 0xf4e <_Z18Send_Drive_Commandv+0xd0>
						//Roomba_UpdateSensorPacket(CHASSIS, &roomba_sensor_packet); // updates the sensors in the roombas chassis
						Roomba_UpdateSensorPacket(EXTERNAL_ROOMBA, &roomba_bumper_sensor_packet); // updates the external sensors of the bot
     eb6:	6d ef       	ldi	r22, 0xFD	; 253
     eb8:	7c e0       	ldi	r23, 0x0C	; 12
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	7f d4       	rcall	.+2302   	; 0x17bc <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t>
						Roomba_UpdateSensorPacket(LIGHT_SENSOR, &roomba_light_sensor_packet); // updates the light sensors of the bot
     ebe:	6a ec       	ldi	r22, 0xCA	; 202
     ec0:	7c e0       	ldi	r23, 0x0C	; 12
     ec2:	85 e6       	ldi	r24, 0x65	; 101
     ec4:	7b d4       	rcall	.+2294   	; 0x17bc <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t>

						if(roomba_bumper_sensor_packet.bumps_wheeldrops & 0x1)
     ec6:	80 91 fd 0c 	lds	r24, 0x0CFD
     eca:	80 ff       	sbrs	r24, 0
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <_Z18Send_Drive_Commandv+0x62>
						{
							roomba_velocity = 100;
     ece:	10 93 02 02 	sts	0x0202, r17
     ed2:	00 93 01 02 	sts	0x0201, r16
							roomba_rotation = 1;
     ed6:	b0 92 35 0d 	sts	0x0D35, r11
     eda:	a0 92 34 0d 	sts	0x0D34, r10
     ede:	2e c0       	rjmp	.+92     	; 0xf3c <_Z18Send_Drive_Commandv+0xbe>
						} else if (roomba_bumper_sensor_packet.bumps_wheeldrops & 0x2)
     ee0:	81 ff       	sbrs	r24, 1
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <_Z18Send_Drive_Commandv+0x78>
						{
							roomba_velocity = 100;
     ee4:	10 93 02 02 	sts	0x0202, r17
     ee8:	00 93 01 02 	sts	0x0201, r16
							roomba_rotation = -1;
     eec:	f0 92 35 0d 	sts	0x0D35, r15
     ef0:	e0 92 34 0d 	sts	0x0D34, r14
     ef4:	23 c0       	rjmp	.+70     	; 0xf3c <_Z18Send_Drive_Commandv+0xbe>
						}
						//left light sensor
						else if (roomba_light_sensor_packet.light_bumber & 0x1 || roomba_light_sensor_packet.light_bumber & 0x2 || roomba_light_sensor_packet.light_bumber & 0x3){
     ef6:	80 91 e8 0c 	lds	r24, 0x0CE8
     efa:	80 fd       	sbrc	r24, 0
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <_Z18Send_Drive_Commandv+0x86>
     efe:	98 2f       	mov	r25, r24
     f00:	93 70       	andi	r25, 0x03	; 3
     f02:	49 f0       	breq	.+18     	; 0xf16 <_Z18Send_Drive_Commandv+0x98>
							roomba_velocity = 240;
     f04:	d0 93 02 02 	sts	0x0202, r29
     f08:	c0 93 01 02 	sts	0x0201, r28
							roomba_rotation = 100;
     f0c:	10 93 35 0d 	sts	0x0D35, r17
     f10:	00 93 34 0d 	sts	0x0D34, r16
     f14:	13 c0       	rjmp	.+38     	; 0xf3c <_Z18Send_Drive_Commandv+0xbe>
						}
						//right light sensor
						else if (roomba_light_sensor_packet.light_bumber & 0x6 || roomba_light_sensor_packet.light_bumber & 0x5 || roomba_light_sensor_packet.light_bumber & 0x4){
     f16:	98 2f       	mov	r25, r24
     f18:	96 70       	andi	r25, 0x06	; 6
							roomba_velocity = 240;
     f1a:	d0 93 02 02 	sts	0x0202, r29
     f1e:	c0 93 01 02 	sts	0x0201, r28
						else if (roomba_light_sensor_packet.light_bumber & 0x1 || roomba_light_sensor_packet.light_bumber & 0x2 || roomba_light_sensor_packet.light_bumber & 0x3){
							roomba_velocity = 240;
							roomba_rotation = 100;
						}
						//right light sensor
						else if (roomba_light_sensor_packet.light_bumber & 0x6 || roomba_light_sensor_packet.light_bumber & 0x5 || roomba_light_sensor_packet.light_bumber & 0x4){
     f22:	91 11       	cpse	r25, r1
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <_Z18Send_Drive_Commandv+0xac>
     f26:	85 70       	andi	r24, 0x05	; 5
     f28:	29 f0       	breq	.+10     	; 0xf34 <_Z18Send_Drive_Commandv+0xb6>
							roomba_velocity = 240;
							roomba_rotation = -100;
     f2a:	d0 92 35 0d 	sts	0x0D35, r13
     f2e:	c0 92 34 0d 	sts	0x0D34, r12
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <_Z18Send_Drive_Commandv+0xbe>
						}
						else {
							roomba_velocity = 240;
							roomba_rotation = 0;
     f34:	10 92 35 0d 	sts	0x0D35, r1
     f38:	10 92 34 0d 	sts	0x0D34, r1
						}
						Roomba_Drive(roomba_velocity, roomba_rotation);
     f3c:	60 91 34 0d 	lds	r22, 0x0D34
     f40:	70 91 35 0d 	lds	r23, 0x0D35
     f44:	80 91 01 02 	lds	r24, 0x0201
     f48:	90 91 02 02 	lds	r25, 0x0202
     f4c:	1d c0       	rjmp	.+58     	; 0xf88 <_Z18Send_Drive_Commandv+0x10a>
						Task_Next();
				}
				else if ((roomba_state&DEAD) > 0){
						roomba_velocity = 0;
     f4e:	10 92 02 02 	sts	0x0202, r1
     f52:	10 92 01 02 	sts	0x0201, r1
						roomba_rotation = 0;
     f56:	10 92 35 0d 	sts	0x0D35, r1
     f5a:	10 92 34 0d 	sts	0x0D34, r1
						Roomba_Drive(roomba_velocity, roomba_rotation);
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	10 c0       	rjmp	.+32     	; 0xf88 <_Z18Send_Drive_Commandv+0x10a>
				}
				break;
				
			case GAME_OVER:
				//roomba won and is alive - rotate
				if((roomba_state & DEAD) == 0){
     f68:	80 91 31 0d 	lds	r24, 0x0D31
     f6c:	80 fd       	sbrc	r24, 0
     f6e:	ef cf       	rjmp	.-34     	; 0xf4e <_Z18Send_Drive_Commandv+0xd0>
					roomba_velocity = 240;
     f70:	d0 93 02 02 	sts	0x0202, r29
     f74:	c0 93 01 02 	sts	0x0201, r28
					roomba_rotation = -1;
     f78:	f0 92 35 0d 	sts	0x0D35, r15
     f7c:	e0 92 34 0d 	sts	0x0D34, r14
					Roomba_Drive(roomba_velocity, roomba_rotation);
     f80:	6f ef       	ldi	r22, 0xFF	; 255
     f82:	7f ef       	ldi	r23, 0xFF	; 255
     f84:	80 ef       	ldi	r24, 0xF0	; 240
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0f d5       	rcall	.+2590   	; 0x19a8 <_Z12Roomba_Driveii>
					Task_Next();	
     f8a:	1b df       	rcall	.-458    	; 0xdc2 <Task_Next>
     f8c:	86 cf       	rjmp	.-244    	; 0xe9a <_Z18Send_Drive_Commandv+0x1c>

00000f8e <_Z15send_IR_Commandv>:
}

void send_IR_Command(){
	
	for(;;) {
		if((roomba_state & DEAD) == 0){
     f8e:	80 91 31 0d 	lds	r24, 0x0D31
     f92:	80 fd       	sbrc	r24, 0
     f94:	08 c0       	rjmp	.+16     	; 0xfa6 <_Z15send_IR_Commandv+0x18>
			if(roomba_identity <= COP2){
     f96:	80 91 30 0d 	lds	r24, 0x0D30
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	10 f4       	brcc	.+4      	; 0xfa2 <_Z15send_IR_Commandv+0x14>
				IR_transmit(COP_CODE);
     f9e:	82 e4       	ldi	r24, 0x42	; 66
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <_Z15send_IR_Commandv+0x16>
			} else if (roomba_identity >= ROBBER1){
				IR_transmit(ROBBER_CODE);
     fa2:	81 e4       	ldi	r24, 0x41	; 65
     fa4:	9a d9       	rcall	.-3276   	; 0x2da <_Z11IR_transmith>
			}
		}
		Task_Next();
     fa6:	0d df       	rcall	.-486    	; 0xdc2 <Task_Next>
		}
		
	}
}

void send_IR_Command(){
     fa8:	f2 cf       	rjmp	.-28     	; 0xf8e <_Z15send_IR_Commandv>

00000faa <_Z12ir_rxhandlerv>:
roomba_sensor_data_t roomba_light_sensor_packet;

pf_gamestate_t current_game_state;

void ir_rxhandler(){
	uint8_t ir_value = IR_getLast();
     faa:	b6 d9       	rcall	.-3220   	; 0x318 <_Z10IR_getLastv>
	
	if (ir_value == COP_CODE){
     fac:	82 34       	cpi	r24, 0x42	; 66
     fae:	59 f4       	brne	.+22     	; 0xfc6 <_Z12ir_rxhandlerv+0x1c>
		// if roomba is robber and not dead will result dead
		if((roomba_state & FORCED) == 0){
     fb0:	80 91 31 0d 	lds	r24, 0x0D31
     fb4:	81 fd       	sbrc	r24, 1
     fb6:	2b c0       	rjmp	.+86     	; 0x100e <_Z12ir_rxhandlerv+0x64>
			if(roomba_identity >= ROBBER1 && (roomba_state & DEAD) == 0){
     fb8:	20 91 30 0d 	lds	r18, 0x0D30
     fbc:	98 2f       	mov	r25, r24
     fbe:	91 70       	andi	r25, 0x01	; 1
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	98 f4       	brcc	.+38     	; 0xfea <_Z12ir_rxhandlerv+0x40>
     fc4:	0c c0       	rjmp	.+24     	; 0xfde <_Z12ir_rxhandlerv+0x34>
				roomba_state ^= DEAD;
				PORTH ^= (uint8_t)(_BV(PH3)); 
				PORTH ^= (uint8_t)(_BV(PH4));
			}
		}		
	}else if (ir_value == ROBBER_CODE){
     fc6:	81 34       	cpi	r24, 0x41	; 65
     fc8:	11 f5       	brne	.+68     	; 0x100e <_Z12ir_rxhandlerv+0x64>
		if((roomba_state & FORCED) == 0){
     fca:	80 91 31 0d 	lds	r24, 0x0D31
     fce:	81 fd       	sbrc	r24, 1
     fd0:	1e c0       	rjmp	.+60     	; 0x100e <_Z12ir_rxhandlerv+0x64>
			if(roomba_identity >= ROBBER1 && (roomba_state & DEAD) > 0){
     fd2:	20 91 30 0d 	lds	r18, 0x0D30
     fd6:	98 2f       	mov	r25, r24
     fd8:	91 70       	andi	r25, 0x01	; 1
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	30 f0       	brcs	.+12     	; 0xfea <_Z12ir_rxhandlerv+0x40>
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	b1 f4       	brne	.+44     	; 0x100e <_Z12ir_rxhandlerv+0x64>
				roomba_state ^= DEAD;
     fe2:	89 27       	eor	r24, r25
     fe4:	80 93 31 0d 	sts	0x0D31, r24
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <_Z12ir_rxhandlerv+0x4c>
				PORTH ^= (uint8_t)(_BV(PH3)); 
				PORTH ^= (uint8_t)(_BV(PH4));
			} else if (roomba_identity <= COP2 && (roomba_state & DEAD) == 0) {
     fea:	91 11       	cpse	r25, r1
     fec:	10 c0       	rjmp	.+32     	; 0x100e <_Z12ir_rxhandlerv+0x64>
				roomba_state ^= DEAD;
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	98 27       	eor	r25, r24
     ff2:	90 93 31 0d 	sts	0x0D31, r25
				PORTH ^= (uint8_t)(_BV(PH3)); 
     ff6:	80 91 02 01 	lds	r24, 0x0102
     ffa:	98 e0       	ldi	r25, 0x08	; 8
     ffc:	89 27       	eor	r24, r25
     ffe:	80 93 02 01 	sts	0x0102, r24
				PORTH ^= (uint8_t)(_BV(PH4));
    1002:	80 91 02 01 	lds	r24, 0x0102
    1006:	90 e1       	ldi	r25, 0x10	; 16
    1008:	89 27       	eor	r24, r25
    100a:	80 93 02 01 	sts	0x0102, r24
    100e:	08 95       	ret

00001010 <_Z15radio_rxhandlerh>:
		
	}		
}

void radio_rxhandler(uint8_t pipe_number){
	PORTE ^= (uint8_t)(_BV(PE3)); 
    1010:	9e b1       	in	r25, 0x0e	; 14
    1012:	28 e0       	ldi	r18, 0x08	; 8
    1014:	92 27       	eor	r25, r18
    1016:	9e b9       	out	0x0e, r25	; 14
	Service_Publish(radio_send_receive_service, pipe_number);
    1018:	68 2f       	mov	r22, r24
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 91 32 0d 	lds	r24, 0x0D32
    1020:	90 91 33 0d 	lds	r25, 0x0D33
    1024:	0b de       	rcall	.-1002   	; 0xc3c <Service_Publish>
	if((roomba_state&DEAD) == 0){
    1026:	80 91 31 0d 	lds	r24, 0x0D31
    102a:	80 fd       	sbrc	r24, 0
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <_Z15radio_rxhandlerh+0x30>
		PORTH &= ~(uint8_t)(_BV(PH4));
    102e:	80 91 02 01 	lds	r24, 0x0102
    1032:	8f 7e       	andi	r24, 0xEF	; 239
    1034:	80 93 02 01 	sts	0x0102, r24
		PORTH |= (uint8_t)(_BV(PH3)); 
    1038:	80 91 02 01 	lds	r24, 0x0102
    103c:	88 60       	ori	r24, 0x08	; 8
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <_Z15radio_rxhandlerh+0x40>
	} else if((roomba_state&DEAD) > 0) {
		PORTH |= (uint8_t)(_BV(PH4));
    1040:	80 91 02 01 	lds	r24, 0x0102
    1044:	80 61       	ori	r24, 0x10	; 16
    1046:	80 93 02 01 	sts	0x0102, r24
		PORTH &= ~(uint8_t)(_BV(PH3));
    104a:	80 91 02 01 	lds	r24, 0x0102
    104e:	87 7f       	andi	r24, 0xF7	; 247
    1050:	80 93 02 01 	sts	0x0102, r24
    1054:	08 95       	ret

00001056 <setup>:

void setup(){
	
	
	//setting LEDS for getting hit by ALIVE (PH3 - pin 6) and DEAD (PH4 - pin 7) 
	DDRH |= (uint8_t)(_BV(PH3)) | (uint8_t)(_BV(PH4));
    1056:	80 91 01 01 	lds	r24, 0x0101
    105a:	88 61       	ori	r24, 0x18	; 24
    105c:	80 93 01 01 	sts	0x0101, r24
	DDRE |= (uint8_t)(_BV(PE3));
    1060:	6b 9a       	sbi	0x0d, 3	; 13
	if((roomba_state&DEAD) == 0){
    1062:	80 91 31 0d 	lds	r24, 0x0D31
    1066:	80 fd       	sbrc	r24, 0
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <setup+0x1c>
		PORTH |= (uint8_t)(_BV(PH3)); // alive
    106a:	80 91 02 01 	lds	r24, 0x0102
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <setup+0x22>
	} else if((roomba_state&DEAD) > 0) {
		PORTH |= (uint8_t)(_BV(PH4));
    1072:	80 91 02 01 	lds	r24, 0x0102
    1076:	80 61       	ori	r24, 0x10	; 16
    1078:	80 93 02 01 	sts	0x0102, r24
	}
	
	// radio setup
	DDRL |= (1 << PL2);
    107c:	80 91 0a 01 	lds	r24, 0x010A
    1080:	84 60       	ori	r24, 0x04	; 4
    1082:	80 93 0a 01 	sts	0x010A, r24
	PORTL &= ~(1 << PL2);
    1086:	80 91 0b 01 	lds	r24, 0x010B
    108a:	8b 7f       	andi	r24, 0xFB	; 251
    108c:	80 93 0b 01 	sts	0x010B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	89 e6       	ldi	r24, 0x69	; 105
    1094:	98 e1       	ldi	r25, 0x18	; 24
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	80 40       	sbci	r24, 0x00	; 0
    109a:	90 40       	sbci	r25, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <setup+0x40>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <setup+0x4a>
    10a0:	00 00       	nop
	_delay_ms(500);  /* max is 262.14 ms / F_CPU in MHz */
	PORTL |= 1 << PL2;
    10a2:	80 91 0b 01 	lds	r24, 0x010B
    10a6:	84 60       	ori	r24, 0x04	; 4
    10a8:	80 93 0b 01 	sts	0x010B, r24
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	89 e6       	ldi	r24, 0x69	; 105
    10b0:	98 e1       	ldi	r25, 0x18	; 24
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	80 40       	sbci	r24, 0x00	; 0
    10b6:	90 40       	sbci	r25, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <setup+0x5c>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <setup+0x66>
    10bc:	00 00       	nop
	_delay_ms(500);
	Radio_Init(BASE_FREQUENCY);
    10be:	80 91 03 02 	lds	r24, 0x0203
    10c2:	f5 d0       	rcall	.+490    	; 0x12ae <_Z10Radio_Inith>
	// Configure the receive settings for radio pipe 0
	Radio_Configure_Rx(RADIO_PIPE_0, ROOMBA_ADDRESSES[roomba_identity], ENABLE);
    10c4:	60 91 30 0d 	lds	r22, 0x0D30
    10c8:	25 e0       	ldi	r18, 0x05	; 5
    10ca:	62 9f       	mul	r22, r18
    10cc:	b0 01       	movw	r22, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	6c 5f       	subi	r22, 0xFC	; 252
    10d2:	7d 4f       	sbci	r23, 0xFD	; 253
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	5e d1       	rcall	.+700    	; 0x1396 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>
	// Configure radio transceiver settings.
	Radio_Configure(RADIO_1MBPS, RADIO_HIGHEST_POWER);
    10da:	63 e0       	ldi	r22, 0x03	; 3
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	e3 d1       	rcall	.+966    	; 0x14a6 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>
	radio_send_receive_service = Service_Init();
    10e0:	5d dd       	rcall	.-1350   	; 0xb9c <Service_Init>
    10e2:	90 93 33 0d 	sts	0x0D33, r25
    10e6:	80 93 32 0d 	sts	0x0D32, r24
	
	
	current_game_state.game_state = GAME_STARTING;
    10ea:	10 92 c5 0c 	sts	0x0CC5, r1
	
	
	Roomba_Init();
    10ee:	31 d3       	rcall	.+1634   	; 0x1752 <_Z11Roomba_Initv>
	IR_init();
    10f0:	1a c8       	rjmp	.-4044   	; 0x126 <_Z7IR_initv>

000010f2 <_Z6r_mainv>:
		Task_Next();
	}
}

int r_main(void)
{
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
	
	setup();
    10f6:	af df       	rcall	.-162    	; 0x1056 <setup>
	Task_Create_System(send_recieve_radio, 0);
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	84 ef       	ldi	r24, 0xF4	; 244
    10fe:	96 e0       	ldi	r25, 0x06	; 6
    1100:	fe dd       	rcall	.-1028   	; 0xcfe <Task_Create_System>
	
	Task_Create_RR(Send_Drive_Command, 0);
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	8f e3       	ldi	r24, 0x3F	; 63
    1108:	97 e0       	ldi	r25, 0x07	; 7
    110a:	12 de       	rcall	.-988    	; 0xd30 <Task_Create_RR>
	//Task_Create_RR(send_IR_Command, 0);
	//Task_Create_Periodic(Send_Drive_Command,0,10,4,5);
	Task_Create_Periodic(send_IR_Command,0,100,4,5);
    110c:	05 e0       	ldi	r16, 0x05	; 5
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	24 e0       	ldi	r18, 0x04	; 4
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	44 e6       	ldi	r20, 0x64	; 100
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	87 ec       	ldi	r24, 0xC7	; 199
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	20 de       	rcall	.-960    	; 0xd62 <Task_Create_Periodic>
	
	return 1;
}
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <_ZL10get_statusv>:
}

void Radio_Flush()
{
	send_instruction(FLUSH_TX, NULL, NULL, 0);
	send_instruction(FLUSH_RX, NULL, NULL, 0);
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	c2 e0       	ldi	r28, 0x02	; 2
    1132:	d1 e0       	ldi	r29, 0x01	; 1
    1134:	88 81       	ld	r24, Y
    1136:	8f 7b       	andi	r24, 0xBF	; 191
    1138:	88 83       	st	Y, r24
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	04 d3       	rcall	.+1544   	; 0x1746 <_Z14SPI_Write_Byteh>
    113e:	98 81       	ld	r25, Y
    1140:	90 64       	ori	r25, 0x40	; 64
    1142:	98 83       	st	Y, r25
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <_ZL12set_registerhPhh>:
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	1f 92       	push	r1
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	8b 01       	movw	r16, r22
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	c9 2e       	mov	r12, r25
    1164:	dd 24       	eor	r13, r13
    1166:	d3 94       	inc	r13
    1168:	f6 01       	movw	r30, r12
    116a:	90 81       	ld	r25, Z
    116c:	9f 7b       	andi	r25, 0xBF	; 191
    116e:	90 83       	st	Z, r25
    1170:	8f 71       	andi	r24, 0x1F	; 31
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	49 83       	std	Y+1, r20	; 0x01
    1176:	e7 d2       	rcall	.+1486   	; 0x1746 <_Z14SPI_Write_Byteh>
    1178:	f8 2e       	mov	r15, r24
    117a:	49 81       	ldd	r20, Y+1	; 0x01
    117c:	64 2f       	mov	r22, r20
    117e:	c8 01       	movw	r24, r16
    1180:	d5 d2       	rcall	.+1450   	; 0x172c <_Z15SPI_Write_BlockPhh>
    1182:	f6 01       	movw	r30, r12
    1184:	90 81       	ld	r25, Z
    1186:	90 64       	ori	r25, 0x40	; 64
    1188:	90 83       	st	Z, r25
    118a:	8f 2d       	mov	r24, r15
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	08 95       	ret

0000119e <_ZL16send_instructionhPhS_h>:
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	7b 01       	movw	r14, r22
    11b2:	8a 01       	movw	r16, r20
    11b4:	90 91 02 01 	lds	r25, 0x0102
    11b8:	9f 7b       	andi	r25, 0xBF	; 191
    11ba:	90 93 02 01 	sts	0x0102, r25
    11be:	29 83       	std	Y+1, r18	; 0x01
    11c0:	c2 d2       	rcall	.+1412   	; 0x1746 <_Z14SPI_Write_Byteh>
    11c2:	29 81       	ldd	r18, Y+1	; 0x01
    11c4:	22 23       	and	r18, r18
    11c6:	59 f0       	breq	.+22     	; 0x11de <_ZL16send_instructionhPhS_h+0x40>
    11c8:	01 15       	cp	r16, r1
    11ca:	11 05       	cpc	r17, r1
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <_ZL16send_instructionhPhS_h+0x38>
    11ce:	62 2f       	mov	r22, r18
    11d0:	c7 01       	movw	r24, r14
    11d2:	ac d2       	rcall	.+1368   	; 0x172c <_Z15SPI_Write_BlockPhh>
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <_ZL16send_instructionhPhS_h+0x40>
    11d6:	42 2f       	mov	r20, r18
    11d8:	b8 01       	movw	r22, r16
    11da:	c7 01       	movw	r24, r14
    11dc:	96 d2       	rcall	.+1324   	; 0x170a <_Z19SPI_ReadWrite_BlockPhS_h>
    11de:	80 91 02 01 	lds	r24, 0x0102
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	80 93 02 01 	sts	0x0102, r24
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <_ZL19reset_pipe0_addressv>:
    11f8:	80 91 2a 02 	lds	r24, 0x022A
    11fc:	88 23       	and	r24, r24
    11fe:	29 f0       	breq	.+10     	; 0x120a <_ZL19reset_pipe0_addressv+0x12>
    1200:	45 e0       	ldi	r20, 0x05	; 5
    1202:	60 e2       	ldi	r22, 0x20	; 32
    1204:	72 e0       	ldi	r23, 0x02	; 2
    1206:	8a e0       	ldi	r24, 0x0A	; 10
    1208:	a0 cf       	rjmp	.-192    	; 0x114a <_ZL12set_registerhPhh>
    120a:	08 95       	ret

0000120c <_ZL12get_registerhPhh.constprop.1>:
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	1f 92       	push	r1
    1218:	1f 92       	push	r1
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	9f ef       	ldi	r25, 0xFF	; 255
    1220:	fb 01       	movw	r30, r22
    1222:	90 83       	st	Z, r25
    1224:	22 e0       	ldi	r18, 0x02	; 2
    1226:	e2 2e       	mov	r14, r18
    1228:	ff 24       	eor	r15, r15
    122a:	f3 94       	inc	r15
    122c:	f7 01       	movw	r30, r14
    122e:	90 81       	ld	r25, Z
    1230:	9f 7b       	andi	r25, 0xBF	; 191
    1232:	90 83       	st	Z, r25
    1234:	8f 71       	andi	r24, 0x1F	; 31
    1236:	69 83       	std	Y+1, r22	; 0x01
    1238:	7a 83       	std	Y+2, r23	; 0x02
    123a:	85 d2       	rcall	.+1290   	; 0x1746 <_Z14SPI_Write_Byteh>
    123c:	18 2f       	mov	r17, r24
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	69 81       	ldd	r22, Y+1	; 0x01
    1242:	7a 81       	ldd	r23, Y+2	; 0x02
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	60 d2       	rcall	.+1216   	; 0x170a <_Z19SPI_ReadWrite_BlockPhS_h>
    124a:	f7 01       	movw	r30, r14
    124c:	90 81       	ld	r25, Z
    124e:	90 64       	ori	r25, 0x40	; 64
    1250:	90 83       	st	Z, r25
    1252:	81 2f       	mov	r24, r17
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <_ZL11set_rx_modev>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	1f 92       	push	r1
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	be 01       	movw	r22, r28
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	ca df       	rcall	.-108    	; 0x120c <_ZL12get_registerhPhh.constprop.1>
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	80 fd       	sbrc	r24, 0
    127c:	14 c0       	rjmp	.+40     	; 0x12a6 <_ZL11set_rx_modev+0x42>
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	be 01       	movw	r22, r28
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	5e df       	rcall	.-324    	; 0x114a <_ZL12set_registerhPhh>
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <_ZL11set_rx_modev+0x2e>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <_ZL11set_rx_modev+0x34>
    1298:	00 00       	nop
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <_ZL11set_rx_modev+0x3a>
    12a2:	00 c0       	rjmp	.+0      	; 0x12a4 <_ZL11set_rx_modev+0x40>
    12a4:	00 00       	nop
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <_Z10Radio_Inith>:
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	1f 92       	push	r1
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	18 2f       	mov	r17, r24
    12bc:	10 92 36 0d 	sts	0x0D36, r1
    12c0:	e2 e0       	ldi	r30, 0x02	; 2
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	90 81       	ld	r25, Z
    12c6:	9f 7d       	andi	r25, 0xDF	; 223
    12c8:	90 83       	st	Z, r25
    12ca:	e1 e0       	ldi	r30, 0x01	; 1
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	90 81       	ld	r25, Z
    12d0:	90 62       	ori	r25, 0x20	; 32
    12d2:	90 83       	st	Z, r25
    12d4:	90 81       	ld	r25, Z
    12d6:	90 64       	ori	r25, 0x40	; 64
    12d8:	90 83       	st	Z, r25
    12da:	6c 98       	cbi	0x0d, 4	; 13
    12dc:	ea e6       	ldi	r30, 0x6A	; 106
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	90 81       	ld	r25, Z
    12e2:	92 60       	ori	r25, 0x02	; 2
    12e4:	90 83       	st	Z, r25
    12e6:	90 81       	ld	r25, Z
    12e8:	9e 7f       	andi	r25, 0xFE	; 254
    12ea:	90 83       	st	Z, r25
    12ec:	ec 9a       	sbi	0x1d, 4	; 29
    12ee:	e4 9a       	sbi	0x1c, 4	; 28
    12f0:	8f ed       	ldi	r24, 0xDF	; 223
    12f2:	9b ea       	ldi	r25, 0xAB	; 171
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <_Z10Radio_Inith+0x46>
    12f8:	00 c0       	rjmp	.+0      	; 0x12fa <_Z10Radio_Inith+0x4c>
    12fa:	00 00       	nop
    12fc:	f9 d1       	rcall	.+1010   	; 0x16f0 <_Z8SPI_Initv>
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	be 01       	movw	r22, r28
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	1f df       	rcall	.-450    	; 0x114a <_ZL12set_registerhPhh>
    130c:	85 e1       	ldi	r24, 0x15	; 21
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	be 01       	movw	r22, r28
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	84 e0       	ldi	r24, 0x04	; 4
    131a:	17 df       	rcall	.-466    	; 0x114a <_ZL12set_registerhPhh>
    131c:	19 83       	std	Y+1, r17	; 0x01
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	be 01       	movw	r22, r28
    1322:	6f 5f       	subi	r22, 0xFF	; 255
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	85 e0       	ldi	r24, 0x05	; 5
    1328:	10 df       	rcall	.-480    	; 0x114a <_ZL12set_registerhPhh>
    132a:	89 e0       	ldi	r24, 0x09	; 9
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	be 01       	movw	r22, r28
    1332:	6f 5f       	subi	r22, 0xFF	; 255
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	08 df       	rcall	.-496    	; 0x114a <_ZL12set_registerhPhh>
    133a:	8f e0       	ldi	r24, 0x0F	; 15
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	be 01       	movw	r22, r28
    1342:	6f 5f       	subi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	00 df       	rcall	.-512    	; 0x114a <_ZL12set_registerhPhh>
    134a:	80 e7       	ldi	r24, 0x70	; 112
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	be 01       	movw	r22, r28
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	87 e0       	ldi	r24, 0x07	; 7
    1358:	f8 de       	rcall	.-528    	; 0x114a <_ZL12set_registerhPhh>
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	81 ee       	ldi	r24, 0xE1	; 225
    1366:	1b df       	rcall	.-458    	; 0x119e <_ZL16send_instructionhPhS_h>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	82 ee       	ldi	r24, 0xE2	; 226
    1374:	14 df       	rcall	.-472    	; 0x119e <_ZL16send_instructionhPhS_h>
    1376:	8f e3       	ldi	r24, 0x3F	; 63
    1378:	9f e1       	ldi	r25, 0x1F	; 31
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <_Z10Radio_Inith+0xcc>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <_Z10Radio_Inith+0xd2>
    1380:	00 00       	nop
    1382:	e2 e0       	ldi	r30, 0x02	; 2
    1384:	f1 e0       	ldi	r31, 0x01	; 1
    1386:	80 81       	ld	r24, Z
    1388:	80 62       	ori	r24, 0x20	; 32
    138a:	80 83       	st	Z, r24
    138c:	0f 90       	pop	r0
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	08 95       	ret

00001396 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>:
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	1f 92       	push	r1
    13a6:	1f 92       	push	r1
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	98 2f       	mov	r25, r24
    13ae:	fb 01       	movw	r30, r22
    13b0:	d4 2e       	mov	r13, r20
    13b2:	86 30       	cpi	r24, 0x06	; 6
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x22>
    13b6:	59 c0       	rjmp	.+178    	; 0x146a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xd4>
    13b8:	81 11       	cpse	r24, r1
    13ba:	10 c0       	rjmp	.+32     	; 0x13dc <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x46>
    13bc:	80 81       	ld	r24, Z
    13be:	80 93 20 02 	sts	0x0220, r24
    13c2:	81 81       	ldd	r24, Z+1	; 0x01
    13c4:	80 93 21 02 	sts	0x0221, r24
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	80 93 22 02 	sts	0x0222, r24
    13ce:	83 81       	ldd	r24, Z+3	; 0x03
    13d0:	80 93 23 02 	sts	0x0223, r24
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	80 93 24 02 	sts	0x0224, r24
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x4e>
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	11 f0       	breq	.+4      	; 0x13e4 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x4e>
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x50>
    13e4:	45 e0       	ldi	r20, 0x05	; 5
    13e6:	bf 01       	movw	r22, r30
    13e8:	8a e0       	ldi	r24, 0x0A	; 10
    13ea:	89 0f       	add	r24, r25
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	ad de       	rcall	.-678    	; 0x114a <_ZL12set_registerhPhh>
    13f0:	be 01       	movw	r22, r28
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	09 df       	rcall	.-494    	; 0x120c <_ZL12get_registerhPhh.constprop.1>
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	e9 2e       	mov	r14, r25
    13fe:	f1 2c       	mov	r15, r1
    1400:	01 e0       	ldi	r16, 0x01	; 1
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x72>
    1406:	00 0f       	add	r16, r16
    1408:	9a 95       	dec	r25
    140a:	ea f7       	brpl	.-6      	; 0x1406 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x70>
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	80 2b       	or	r24, r16
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	be 01       	movw	r22, r28
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	96 de       	rcall	.-724    	; 0x114a <_ZL12set_registerhPhh>
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	dd 20       	and	r13, r13
    1422:	11 f0       	breq	.+4      	; 0x1428 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x92>
    1424:	80 e2       	ldi	r24, 0x20	; 32
    1426:	01 c0       	rjmp	.+2      	; 0x142a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x94>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	be 01       	movw	r22, r28
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	81 e1       	ldi	r24, 0x11	; 17
    1436:	89 0f       	add	r24, r25
    1438:	88 de       	rcall	.-752    	; 0x114a <_ZL12set_registerhPhh>
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	f7 01       	movw	r30, r14
    143e:	e6 5d       	subi	r30, 0xD6	; 214
    1440:	fd 4f       	sbci	r31, 0xFD	; 253
    1442:	80 83       	st	Z, r24
    1444:	be 01       	movw	r22, r28
    1446:	6f 5f       	subi	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	df de       	rcall	.-578    	; 0x120c <_ZL12get_registerhPhh.constprop.1>
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	dd 20       	and	r13, r13
    1452:	11 f0       	breq	.+4      	; 0x1458 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xc2>
    1454:	08 2b       	or	r16, r24
    1456:	02 c0       	rjmp	.+4      	; 0x145c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xc6>
    1458:	00 95       	com	r16
    145a:	08 23       	and	r16, r24
    145c:	09 83       	std	Y+1, r16	; 0x01
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	be 01       	movw	r22, r28
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	70 de       	rcall	.-800    	; 0x114a <_ZL12set_registerhPhh>
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	08 95       	ret

0000147e <_Z17Radio_Set_Tx_AddrPh>:
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	80 93 25 02 	sts	0x0225, r24
    1486:	81 81       	ldd	r24, Z+1	; 0x01
    1488:	80 93 26 02 	sts	0x0226, r24
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	80 93 27 02 	sts	0x0227, r24
    1492:	83 81       	ldd	r24, Z+3	; 0x03
    1494:	80 93 28 02 	sts	0x0228, r24
    1498:	84 81       	ldd	r24, Z+4	; 0x04
    149a:	80 93 29 02 	sts	0x0229, r24
    149e:	45 e0       	ldi	r20, 0x05	; 5
    14a0:	bf 01       	movw	r22, r30
    14a2:	80 e1       	ldi	r24, 0x10	; 16
    14a4:	52 ce       	rjmp	.-860    	; 0x114a <_ZL12set_registerhPhh>

000014a6 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>:
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	1f 92       	push	r1
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	18 2f       	mov	r17, r24
    14b6:	06 2f       	mov	r16, r22
    14b8:	64 30       	cpi	r22, 0x04	; 4
    14ba:	a8 f4       	brcc	.+42     	; 0x14e6 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x40>
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	98 f4       	brcc	.+38     	; 0x14e6 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x40>
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	86 e0       	ldi	r24, 0x06	; 6
    14c8:	a1 de       	rcall	.-702    	; 0x120c <_ZL12get_registerhPhh.constprop.1>
    14ca:	60 2f       	mov	r22, r16
    14cc:	66 0f       	add	r22, r22
    14ce:	99 81       	ldd	r25, Y+1	; 0x01
    14d0:	96 60       	ori	r25, 0x06	; 6
    14d2:	69 23       	and	r22, r25
    14d4:	11 11       	cpse	r17, r1
    14d6:	68 60       	ori	r22, 0x08	; 8
    14d8:	69 83       	std	Y+1, r22	; 0x01
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	be 01       	movw	r22, r28
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	86 e0       	ldi	r24, 0x06	; 6
    14e4:	32 de       	rcall	.-924    	; 0x114a <_ZL12set_registerhPhh>
    14e6:	0f 90       	pop	r0
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <_Z14Radio_TransmitP3_rp14_radio_tx_wait>:
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	1f 92       	push	r1
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	8c 01       	movw	r16, r24
    1504:	f6 2e       	mov	r15, r22
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 36 0d 	sts	0x0D36, r24
    150c:	80 91 02 01 	lds	r24, 0x0102
    1510:	8f 7d       	andi	r24, 0xDF	; 223
    1512:	80 93 02 01 	sts	0x0102, r24
    1516:	be 01       	movw	r22, r28
    1518:	6f 5f       	subi	r22, 0xFF	; 255
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	76 de       	rcall	.-788    	; 0x120c <_ZL12get_registerhPhh.constprop.1>
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	80 ff       	sbrs	r24, 0
    1524:	14 c0       	rjmp	.+40     	; 0x154e <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x5c>
    1526:	8e 7f       	andi	r24, 0xFE	; 254
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	be 01       	movw	r22, r28
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	0a de       	rcall	.-1004   	; 0x114a <_ZL12set_registerhPhh>
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x48>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x4e>
    1540:	00 00       	nop
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x54>
    154a:	00 c0       	rjmp	.+0      	; 0x154c <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x5a>
    154c:	00 00       	nop
    154e:	45 e0       	ldi	r20, 0x05	; 5
    1550:	65 e2       	ldi	r22, 0x25	; 37
    1552:	72 e0       	ldi	r23, 0x02	; 2
    1554:	8a e0       	ldi	r24, 0x0A	; 10
    1556:	f9 dd       	rcall	.-1038   	; 0x114a <_ZL12set_registerhPhh>
    1558:	20 e2       	ldi	r18, 0x20	; 32
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	b8 01       	movw	r22, r16
    1560:	80 ea       	ldi	r24, 0xA0	; 160
    1562:	1d de       	rcall	.-966    	; 0x119e <_ZL16send_instructionhPhS_h>
    1564:	80 91 02 01 	lds	r24, 0x0102
    1568:	80 62       	ori	r24, 0x20	; 32
    156a:	80 93 02 01 	sts	0x0102, r24
    156e:	f1 10       	cpse	r15, r1
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x8e>
    1572:	80 91 36 0d 	lds	r24, 0x0D36
    1576:	81 11       	cpse	r24, r1
    1578:	fc cf       	rjmp	.-8      	; 0x1572 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x80>
    157a:	80 91 1d 02 	lds	r24, 0x021D
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x90>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	0f 90       	pop	r0
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	08 95       	ret

00001590 <_Z13Radio_ReceiveP3_rp>:
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
    1596:	10 92 36 0d 	sts	0x0D36, r1
    159a:	80 91 02 01 	lds	r24, 0x0102
    159e:	8f 7d       	andi	r24, 0xDF	; 223
    15a0:	80 93 02 01 	sts	0x0102, r24
    15a4:	c3 dd       	rcall	.-1146   	; 0x112c <_ZL10get_statusv>
    15a6:	8e 70       	andi	r24, 0x0E	; 14
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	35 95       	asr	r19
    15ae:	27 95       	ror	r18
    15b0:	f9 01       	movw	r30, r18
    15b2:	e6 5d       	subi	r30, 0xD6	; 214
    15b4:	fd 4f       	sbci	r31, 0xFD	; 253
    15b6:	80 81       	ld	r24, Z
    15b8:	81 32       	cpi	r24, 0x21	; 33
    15ba:	68 f4       	brcc	.+26     	; 0x15d6 <_Z13Radio_ReceiveP3_rp+0x46>
    15bc:	27 30       	cpi	r18, 0x07	; 7
    15be:	69 f0       	breq	.+26     	; 0x15da <_Z13Radio_ReceiveP3_rp+0x4a>
    15c0:	20 81       	ld	r18, Z
    15c2:	ae 01       	movw	r20, r28
    15c4:	be 01       	movw	r22, r28
    15c6:	81 e6       	ldi	r24, 0x61	; 97
    15c8:	ea dd       	rcall	.-1068   	; 0x119e <_ZL16send_instructionhPhS_h>
    15ca:	b0 dd       	rcall	.-1184   	; 0x112c <_ZL10get_statusv>
    15cc:	8e 70       	andi	r24, 0x0E	; 14
    15ce:	8e 30       	cpi	r24, 0x0E	; 14
    15d0:	31 f0       	breq	.+12     	; 0x15de <_Z13Radio_ReceiveP3_rp+0x4e>
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <_Z13Radio_ReceiveP3_rp+0x50>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	03 c0       	rjmp	.+6      	; 0x15e0 <_Z13Radio_ReceiveP3_rp+0x50>
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <_Z13Radio_ReceiveP3_rp+0x50>
    15de:	84 e0       	ldi	r24, 0x04	; 4
    15e0:	90 91 02 01 	lds	r25, 0x0102
    15e4:	90 62       	ori	r25, 0x20	; 32
    15e6:	90 93 02 01 	sts	0x0102, r25
    15ea:	10 92 36 0d 	sts	0x0D36, r1
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <__vector_5>:
}


// Interrupt handler
ISR(INT4_vect)
{
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	0b b6       	in	r0, 0x3b	; 59
    1600:	0f 92       	push	r0
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	1f 92       	push	r1
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

	//DEBUG_2_LOW;
    CE_LOW();
    1624:	80 91 02 01 	lds	r24, 0x0102
    1628:	8f 7d       	andi	r24, 0xDF	; 223
    162a:	80 93 02 01 	sts	0x0102, r24

    status = get_status();
    162e:	7e dd       	rcall	.-1284   	; 0x112c <_ZL10get_statusv>
    1630:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR))
    1632:	86 ff       	sbrs	r24, 6
    1634:	03 c0       	rjmp	.+6      	; 0x163c <__vector_5+0x48>
    {
    	pipe_number =  (status & 0xE) >> 1;
    1636:	8e 70       	andi	r24, 0x0E	; 14
    	radio_rxhandler(pipe_number);
    1638:	86 95       	lsr	r24
    163a:	ea dc       	rcall	.-1580   	; 0x1010 <_Z15radio_rxhandlerh>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	85 ff       	sbrs	r24, 5
    1640:	1b c0       	rjmp	.+54     	; 0x1678 <__vector_5+0x84>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1642:	10 92 36 0d 	sts	0x0D36, r1
        reset_pipe0_address();
    1646:	d8 dd       	rcall	.-1104   	; 0x11f8 <_ZL19reset_pipe0_addressv>
        set_rx_mode();
    1648:	0d de       	rcall	.-998    	; 0x1264 <_ZL11set_rx_modev>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
    164a:	80 91 1e 02 	lds	r24, 0x021E
    164e:	90 91 1f 02 	lds	r25, 0x021F
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	90 93 1f 02 	sts	0x021F, r25
    165a:	80 93 1e 02 	sts	0x021E, r24
    	tx_history |= 1;
    165e:	80 91 1e 02 	lds	r24, 0x021E
    1662:	90 91 1f 02 	lds	r25, 0x021F
    1666:	81 60       	ori	r24, 0x01	; 1
    1668:	90 93 1f 02 	sts	0x021F, r25
    166c:	80 93 1e 02 	sts	0x021E, r24

    	tx_last_status = RADIO_TX_SUCCESS;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 1d 02 	sts	0x021D, r24
    1676:	19 c0       	rjmp	.+50     	; 0x16aa <__vector_5+0xb6>
    }
    else if (status & _BV(MAX_RT))
    1678:	84 ff       	sbrs	r24, 4
    167a:	17 c0       	rjmp	.+46     	; 0x16aa <__vector_5+0xb6>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	81 ee       	ldi	r24, 0xE1	; 225
    1688:	8a dd       	rcall	.-1260   	; 0x119e <_ZL16send_instructionhPhS_h>

    	transmit_lock = 0;
    168a:	10 92 36 0d 	sts	0x0D36, r1
    	reset_pipe0_address();
    168e:	b4 dd       	rcall	.-1176   	; 0x11f8 <_ZL19reset_pipe0_addressv>
		set_rx_mode();
    1690:	e9 dd       	rcall	.-1070   	; 0x1264 <_ZL11set_rx_modev>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
    1692:	80 91 1e 02 	lds	r24, 0x021E
    1696:	90 91 1f 02 	lds	r25, 0x021F
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	90 93 1f 02 	sts	0x021F, r25
    16a2:	80 93 1e 02 	sts	0x021E, r24

    	tx_last_status = RADIO_TX_MAX_RT;
    16a6:	10 92 1d 02 	sts	0x021D, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    16aa:	80 e7       	ldi	r24, 0x70	; 112
    16ac:	89 83       	std	Y+1, r24	; 0x01
	set_register(STATUS, &status, 1);
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	be 01       	movw	r22, r28
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	87 e0       	ldi	r24, 0x07	; 7
    16b8:	48 dd       	rcall	.-1392   	; 0x114a <_ZL12set_registerhPhh>
	//DEBUG_2_HIGH;

    CE_HIGH();
    16ba:	80 91 02 01 	lds	r24, 0x0102
    16be:	80 62       	ori	r24, 0x20	; 32
    16c0:	80 93 02 01 	sts	0x0102, r24
    16c4:	0f 90       	pop	r0
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	ff 91       	pop	r31
    16cc:	ef 91       	pop	r30
    16ce:	bf 91       	pop	r27
    16d0:	af 91       	pop	r26
    16d2:	9f 91       	pop	r25
    16d4:	8f 91       	pop	r24
    16d6:	7f 91       	pop	r23
    16d8:	6f 91       	pop	r22
    16da:	5f 91       	pop	r21
    16dc:	4f 91       	pop	r20
    16de:	3f 91       	pop	r19
    16e0:	2f 91       	pop	r18
    16e2:	0f 90       	pop	r0
    16e4:	0b be       	out	0x3b, r0	; 59
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <_Z8SPI_Initv>:
	// The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
	// to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
	// the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
	// It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
	// when the SPI operation is complete.
    SPI_DDR &= ~(_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SS)|_BV(SPI_SCK));
    16f0:	84 b1       	in	r24, 0x04	; 4
    16f2:	80 7f       	andi	r24, 0xF0	; 240
    16f4:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= (_BV(SPI_MOSI) | _BV(SPI_SS) | _BV(SPI_SCK));
    16f6:	84 b1       	in	r24, 0x04	; 4
    16f8:	87 60       	ori	r24, 0x07	; 7
    16fa:	84 b9       	out	0x04, r24	; 4
	 * SPR1 | SPR0 - Determines SCK frequency along with the SPI2X bit in SPSR.  See Table 17-4 in hardware manual [p178].
	 * bit 0
	 */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    SPI_PORT |= _BV(SPI_SS);
    16fc:	28 9a       	sbi	0x05, 0	; 5

	SPCR = _BV(SPE) | _BV(MSTR);	// enable SPI, set as master, set prescaler to f(osc)/4
    16fe:	80 e5       	ldi	r24, 0x50	; 80
    1700:	8c bd       	out	0x2c, r24	; 44

	SPSR = _BV(SPI2X);							// Double SCK to f(osc)/2 (4 MHz)
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	8d bd       	out	0x2d, r24	; 45

	SPI_PORT &= ~_BV(SPI_SS);
    1706:	28 98       	cbi	0x05, 0	; 5
    1708:	08 95       	ret

0000170a <_Z19SPI_ReadWrite_BlockPhS_h>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    170a:	26 2f       	mov	r18, r22
    uint8_t i;
    for (i = 0; i < len; i++) {
    170c:	fb 01       	movw	r30, r22
    170e:	3e 2f       	mov	r19, r30
    1710:	32 1b       	sub	r19, r18
    1712:	34 17       	cp	r19, r20
    1714:	50 f4       	brcc	.+20     	; 0x172a <_Z19SPI_ReadWrite_BlockPhS_h+0x20>
          SPDR = data[i];
    1716:	dc 01       	movw	r26, r24
    1718:	3d 91       	ld	r19, X+
    171a:	cd 01       	movw	r24, r26
    171c:	3e bd       	out	0x2e, r19	; 46
          SPI_WAIT();
    171e:	0d b4       	in	r0, 0x2d	; 45
    1720:	07 fe       	sbrs	r0, 7
    1722:	fd cf       	rjmp	.-6      	; 0x171e <_Z19SPI_ReadWrite_BlockPhS_h+0x14>
          buffer[i] = SPDR;
    1724:	3e b5       	in	r19, 0x2e	; 46
    1726:	31 93       	st	Z+, r19
    1728:	f2 cf       	rjmp	.-28     	; 0x170e <_Z19SPI_ReadWrite_BlockPhS_h+0x4>
    }
}
    172a:	08 95       	ret

0000172c <_Z15SPI_Write_BlockPhh>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    172c:	28 2f       	mov	r18, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
    172e:	fc 01       	movw	r30, r24
    1730:	8e 2f       	mov	r24, r30
    1732:	82 1b       	sub	r24, r18
    1734:	86 17       	cp	r24, r22
    1736:	30 f4       	brcc	.+12     	; 0x1744 <_Z15SPI_Write_BlockPhh+0x18>
          SPDR = data[i];
    1738:	81 91       	ld	r24, Z+
    173a:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    173c:	0d b4       	in	r0, 0x2d	; 45
    173e:	07 fe       	sbrs	r0, 7
    1740:	fd cf       	rjmp	.-6      	; 0x173c <_Z15SPI_Write_BlockPhh+0x10>
    1742:	f6 cf       	rjmp	.-20     	; 0x1730 <_Z15SPI_Write_BlockPhh+0x4>
    }
}
    1744:	08 95       	ret

00001746 <_Z14SPI_Write_Byteh>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1746:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1748:	0d b4       	in	r0, 0x2d	; 45
    174a:	07 fe       	sbrs	r0, 7
    174c:	fd cf       	rjmp	.-6      	; 0x1748 <_Z14SPI_Write_Byteh+0x2>
    return SPDR;
    174e:	8e b5       	in	r24, 0x2e	; 46
}
    1750:	08 95       	ret

00001752 <_Z11Roomba_Initv>:
	Roomba_Send_Byte(SAFE);
	_delay_ms(20);
}

void Roomba_Finish() {
	Roomba_Send_Byte(STOP);
    1752:	51 9a       	sbi	0x0a, 1	; 10
    1754:	59 98       	cbi	0x0b, 1	; 11
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	4b d1       	rcall	.+662    	; 0x19f0 <_Z16Roomba_UART_Init9_uart_bps>
    175a:	80 e8       	ldi	r24, 0x80	; 128
    175c:	42 d1       	rcall	.+644    	; 0x19e2 <_Z16Roomba_Send_Byteh>
    175e:	2f ef       	ldi	r18, 0xFF	; 255
    1760:	89 ef       	ldi	r24, 0xF9	; 249
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	21 50       	subi	r18, 0x01	; 1
    1766:	80 40       	sbci	r24, 0x00	; 0
    1768:	90 40       	sbci	r25, 0x00	; 0
    176a:	e1 f7       	brne	.-8      	; 0x1764 <_Z11Roomba_Initv+0x12>
    176c:	00 c0       	rjmp	.+0      	; 0x176e <_Z11Roomba_Initv+0x1c>
    176e:	00 00       	nop
    1770:	81 e8       	ldi	r24, 0x81	; 129
    1772:	37 d1       	rcall	.+622    	; 0x19e2 <_Z16Roomba_Send_Byteh>
    1774:	87 e0       	ldi	r24, 0x07	; 7
    1776:	35 d1       	rcall	.+618    	; 0x19e2 <_Z16Roomba_Send_Byteh>
    1778:	2f ef       	ldi	r18, 0xFF	; 255
    177a:	81 ee       	ldi	r24, 0xE1	; 225
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	21 50       	subi	r18, 0x01	; 1
    1780:	80 40       	sbci	r24, 0x00	; 0
    1782:	90 40       	sbci	r25, 0x00	; 0
    1784:	e1 f7       	brne	.-8      	; 0x177e <_Z11Roomba_Initv+0x2c>
    1786:	00 c0       	rjmp	.+0      	; 0x1788 <_Z11Roomba_Initv+0x36>
    1788:	00 00       	nop
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	31 d1       	rcall	.+610    	; 0x19f0 <_Z16Roomba_UART_Init9_uart_bps>
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	28 d1       	rcall	.+592    	; 0x19e2 <_Z16Roomba_Send_Byteh>
    1792:	2f ef       	ldi	r18, 0xFF	; 255
    1794:	89 ef       	ldi	r24, 0xF9	; 249
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	21 50       	subi	r18, 0x01	; 1
    179a:	80 40       	sbci	r24, 0x00	; 0
    179c:	90 40       	sbci	r25, 0x00	; 0
    179e:	e1 f7       	brne	.-8      	; 0x1798 <_Z11Roomba_Initv+0x46>
    17a0:	00 c0       	rjmp	.+0      	; 0x17a2 <_Z11Roomba_Initv+0x50>
    17a2:	00 00       	nop
    17a4:	83 e8       	ldi	r24, 0x83	; 131
    17a6:	1d d1       	rcall	.+570    	; 0x19e2 <_Z16Roomba_Send_Byteh>
    17a8:	2f ef       	ldi	r18, 0xFF	; 255
    17aa:	89 ef       	ldi	r24, 0xF9	; 249
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	21 50       	subi	r18, 0x01	; 1
    17b0:	80 40       	sbci	r24, 0x00	; 0
    17b2:	90 40       	sbci	r25, 0x00	; 0
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <_Z11Roomba_Initv+0x5c>
    17b6:	00 c0       	rjmp	.+0      	; 0x17b8 <_Z11Roomba_Initv+0x66>
    17b8:	00 00       	nop
    17ba:	08 95       	ret

000017bc <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t>:
}

void Roomba_UpdateSensorPacket(ROOMBA_SENSOR_GROUP group, roomba_sensor_data_t* sensor_packet)
{
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	18 2f       	mov	r17, r24
    17c4:	eb 01       	movw	r28, r22
	Roomba_Send_Byte(SENSORS);
    17c6:	8e e8       	ldi	r24, 0x8E	; 142
    17c8:	0c d1       	rcall	.+536    	; 0x19e2 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(group);
    17ca:	81 2f       	mov	r24, r17
    17cc:	0a d1       	rcall	.+532    	; 0x19e2 <_Z16Roomba_Send_Byteh>
	switch(group)
    17ce:	12 30       	cpi	r17, 0x02	; 2
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x18>
    17d2:	37 c0       	rjmp	.+110    	; 0x1842 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x86>
    17d4:	18 f4       	brcc	.+6      	; 0x17dc <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x20>
    17d6:	11 30       	cpi	r17, 0x01	; 1
    17d8:	41 f0       	breq	.+16     	; 0x17ea <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x2e>
    17da:	e2 c0       	rjmp	.+452    	; 0x19a0 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1e4>
    17dc:	13 30       	cpi	r17, 0x03	; 3
    17de:	09 f4       	brne	.+2      	; 0x17e2 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x26>
    17e0:	4c c0       	rjmp	.+152    	; 0x187a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0xbe>
    17e2:	15 36       	cpi	r17, 0x65	; 101
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x2c>
    17e6:	75 c0       	rjmp	.+234    	; 0x18d2 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x116>
    17e8:	db c0       	rjmp	.+438    	; 0x19a0 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1e4>
	{
	case EXTERNAL_ROOMBA:
		// environment sensors
		while (uart_bytes_received() != 10);
    17ea:	2f d1       	rcall	.+606    	; 0x1a4a <_Z19uart_bytes_receivedv>
    17ec:	8a 30       	cpi	r24, 0x0A	; 10
    17ee:	e9 f7       	brne	.-6      	; 0x17ea <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x2e>
		sensor_packet->bumps_wheeldrops = uart_get_byte(0);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	56 d1       	rcall	.+684    	; 0x1aa2 <_Z13uart_get_bytei>
    17f6:	88 83       	st	Y, r24
		sensor_packet->wall = uart_get_byte(1);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	52 d1       	rcall	.+676    	; 0x1aa2 <_Z13uart_get_bytei>
    17fe:	89 83       	std	Y+1, r24	; 0x01
		sensor_packet->cliff_left = uart_get_byte(2);
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	4e d1       	rcall	.+668    	; 0x1aa2 <_Z13uart_get_bytei>
    1806:	8a 83       	std	Y+2, r24	; 0x02
		sensor_packet->cliff_front_left = uart_get_byte(3);
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	4a d1       	rcall	.+660    	; 0x1aa2 <_Z13uart_get_bytei>
    180e:	8b 83       	std	Y+3, r24	; 0x03
		sensor_packet->cliff_front_right = uart_get_byte(4);
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	46 d1       	rcall	.+652    	; 0x1aa2 <_Z13uart_get_bytei>
    1816:	8c 83       	std	Y+4, r24	; 0x04
		sensor_packet->cliff_right = uart_get_byte(5);
    1818:	85 e0       	ldi	r24, 0x05	; 5
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	42 d1       	rcall	.+644    	; 0x1aa2 <_Z13uart_get_bytei>
    181e:	8d 83       	std	Y+5, r24	; 0x05
		sensor_packet->virtual_wall = uart_get_byte(6);
    1820:	86 e0       	ldi	r24, 0x06	; 6
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	3e d1       	rcall	.+636    	; 0x1aa2 <_Z13uart_get_bytei>
    1826:	8e 83       	std	Y+6, r24	; 0x06
		sensor_packet->motor_overcurrents = uart_get_byte(7);
    1828:	87 e0       	ldi	r24, 0x07	; 7
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	3a d1       	rcall	.+628    	; 0x1aa2 <_Z13uart_get_bytei>
    182e:	8f 83       	std	Y+7, r24	; 0x07
		sensor_packet->dirt_left = uart_get_byte(8);
    1830:	88 e0       	ldi	r24, 0x08	; 8
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	36 d1       	rcall	.+620    	; 0x1aa2 <_Z13uart_get_bytei>
    1836:	88 87       	std	Y+8, r24	; 0x08
		sensor_packet->dirt_right = uart_get_byte(9);
    1838:	89 e0       	ldi	r24, 0x09	; 9
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	32 d1       	rcall	.+612    	; 0x1aa2 <_Z13uart_get_bytei>
    183e:	89 87       	std	Y+9, r24	; 0x09
		break;
    1840:	af c0       	rjmp	.+350    	; 0x19a0 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1e4>
	case CHASSIS:
		// chassis sensors
		while (uart_bytes_received() != 6);
    1842:	03 d1       	rcall	.+518    	; 0x1a4a <_Z19uart_bytes_receivedv>
    1844:	86 30       	cpi	r24, 0x06	; 6
    1846:	e9 f7       	brne	.-6      	; 0x1842 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x86>
		sensor_packet->remote_opcode = uart_get_byte(0);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2a d1       	rcall	.+596    	; 0x1aa2 <_Z13uart_get_bytei>
    184e:	8a 87       	std	Y+10, r24	; 0x0a
		sensor_packet->buttons = uart_get_byte(1);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	26 d1       	rcall	.+588    	; 0x1aa2 <_Z13uart_get_bytei>
    1856:	8b 87       	std	Y+11, r24	; 0x0b
		sensor_packet->distance.bytes.high_byte = uart_get_byte(2);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	22 d1       	rcall	.+580    	; 0x1aa2 <_Z13uart_get_bytei>
    185e:	8d 87       	std	Y+13, r24	; 0x0d
		sensor_packet->distance.bytes.low_byte = uart_get_byte(3);
    1860:	83 e0       	ldi	r24, 0x03	; 3
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	1e d1       	rcall	.+572    	; 0x1aa2 <_Z13uart_get_bytei>
    1866:	8c 87       	std	Y+12, r24	; 0x0c
		sensor_packet->angle.bytes.high_byte = uart_get_byte(4);
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	1a d1       	rcall	.+564    	; 0x1aa2 <_Z13uart_get_bytei>
    186e:	8f 87       	std	Y+15, r24	; 0x0f
		sensor_packet->angle.bytes.low_byte = uart_get_byte(5);
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	16 d1       	rcall	.+556    	; 0x1aa2 <_Z13uart_get_bytei>
    1876:	8e 87       	std	Y+14, r24	; 0x0e
		break;
    1878:	93 c0       	rjmp	.+294    	; 0x19a0 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1e4>
	case INTERNAL:
		// internal sensors
		while (uart_bytes_received() != 10);
    187a:	e7 d0       	rcall	.+462    	; 0x1a4a <_Z19uart_bytes_receivedv>
    187c:	8a 30       	cpi	r24, 0x0A	; 10
    187e:	e9 f7       	brne	.-6      	; 0x187a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0xbe>
		sensor_packet->charging_state = uart_get_byte(0);
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e d1       	rcall	.+540    	; 0x1aa2 <_Z13uart_get_bytei>
    1886:	88 8b       	std	Y+16, r24	; 0x10
		sensor_packet->voltage.bytes.high_byte = uart_get_byte(1);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0a d1       	rcall	.+532    	; 0x1aa2 <_Z13uart_get_bytei>
    188e:	8a 8b       	std	Y+18, r24	; 0x12
		sensor_packet->voltage.bytes.low_byte = uart_get_byte(2);
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	06 d1       	rcall	.+524    	; 0x1aa2 <_Z13uart_get_bytei>
    1896:	89 8b       	std	Y+17, r24	; 0x11
		sensor_packet->current.bytes.high_byte = uart_get_byte(3);
    1898:	83 e0       	ldi	r24, 0x03	; 3
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 d1       	rcall	.+516    	; 0x1aa2 <_Z13uart_get_bytei>
    189e:	8c 8b       	std	Y+20, r24	; 0x14
		sensor_packet->current.bytes.low_byte = uart_get_byte(4);
    18a0:	84 e0       	ldi	r24, 0x04	; 4
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	fe d0       	rcall	.+508    	; 0x1aa2 <_Z13uart_get_bytei>
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
		sensor_packet->temperature = uart_get_byte(5);
    18a8:	85 e0       	ldi	r24, 0x05	; 5
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	fa d0       	rcall	.+500    	; 0x1aa2 <_Z13uart_get_bytei>
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
		sensor_packet->charge.bytes.high_byte = uart_get_byte(6);
    18b0:	86 e0       	ldi	r24, 0x06	; 6
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	f6 d0       	rcall	.+492    	; 0x1aa2 <_Z13uart_get_bytei>
    18b6:	8f 8b       	std	Y+23, r24	; 0x17
		sensor_packet->charge.bytes.low_byte = uart_get_byte(7);
    18b8:	87 e0       	ldi	r24, 0x07	; 7
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	f2 d0       	rcall	.+484    	; 0x1aa2 <_Z13uart_get_bytei>
    18be:	8e 8b       	std	Y+22, r24	; 0x16
		sensor_packet->capacity.bytes.high_byte = uart_get_byte(8);
    18c0:	88 e0       	ldi	r24, 0x08	; 8
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	ee d0       	rcall	.+476    	; 0x1aa2 <_Z13uart_get_bytei>
    18c6:	89 8f       	std	Y+25, r24	; 0x19
		sensor_packet->capacity.bytes.low_byte = uart_get_byte(9);
    18c8:	89 e0       	ldi	r24, 0x09	; 9
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	ea d0       	rcall	.+468    	; 0x1aa2 <_Z13uart_get_bytei>
    18ce:	88 8f       	std	Y+24, r24	; 0x18
		break;
    18d0:	67 c0       	rjmp	.+206    	; 0x19a0 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1e4>
	case LIGHT_SENSOR:
		// light sensors sensors
		while (uart_bytes_received() != 28);
    18d2:	bb d0       	rcall	.+374    	; 0x1a4a <_Z19uart_bytes_receivedv>
    18d4:	8c 31       	cpi	r24, 0x1C	; 28
    18d6:	e9 f7       	brne	.-6      	; 0x18d2 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x116>
		sensor_packet->left_encoder_counts.bytes.high_byte = uart_get_byte(0);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	e2 d0       	rcall	.+452    	; 0x1aa2 <_Z13uart_get_bytei>
    18de:	8b 8f       	std	Y+27, r24	; 0x1b
		sensor_packet->left_encoder_counts.bytes.low_byte = uart_get_byte(1);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	de d0       	rcall	.+444    	; 0x1aa2 <_Z13uart_get_bytei>
    18e6:	8a 8f       	std	Y+26, r24	; 0x1a
		sensor_packet->right_encoder_counts.bytes.high_byte = uart_get_byte(2);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	da d0       	rcall	.+436    	; 0x1aa2 <_Z13uart_get_bytei>
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
		sensor_packet->right_encoder_counts.bytes.low_byte = uart_get_byte(3);
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	d6 d0       	rcall	.+428    	; 0x1aa2 <_Z13uart_get_bytei>
    18f6:	8c 8f       	std	Y+28, r24	; 0x1c
		sensor_packet->light_bumber = uart_get_byte(4);
    18f8:	84 e0       	ldi	r24, 0x04	; 4
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	d2 d0       	rcall	.+420    	; 0x1aa2 <_Z13uart_get_bytei>
    18fe:	8e 8f       	std	Y+30, r24	; 0x1e
		sensor_packet->left_light_bumber_signal.bytes.high_byte = uart_get_byte(5);
    1900:	85 e0       	ldi	r24, 0x05	; 5
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	ce d0       	rcall	.+412    	; 0x1aa2 <_Z13uart_get_bytei>
    1906:	88 a3       	std	Y+32, r24	; 0x20
		sensor_packet->left_light_bumber_signal.bytes.low_byte = uart_get_byte(6);
    1908:	86 e0       	ldi	r24, 0x06	; 6
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	ca d0       	rcall	.+404    	; 0x1aa2 <_Z13uart_get_bytei>
    190e:	8f 8f       	std	Y+31, r24	; 0x1f
		sensor_packet->left_front_light_bumber_signal.bytes.high_byte = uart_get_byte(7);
    1910:	87 e0       	ldi	r24, 0x07	; 7
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	c6 d0       	rcall	.+396    	; 0x1aa2 <_Z13uart_get_bytei>
    1916:	8a a3       	std	Y+34, r24	; 0x22
		sensor_packet->left_front_light_bumber_signal.bytes.low_byte = uart_get_byte(8);
    1918:	88 e0       	ldi	r24, 0x08	; 8
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	c2 d0       	rcall	.+388    	; 0x1aa2 <_Z13uart_get_bytei>
    191e:	89 a3       	std	Y+33, r24	; 0x21
		sensor_packet->left_center_light_bumber_signal.bytes.high_byte = uart_get_byte(9);
    1920:	89 e0       	ldi	r24, 0x09	; 9
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	be d0       	rcall	.+380    	; 0x1aa2 <_Z13uart_get_bytei>
    1926:	8c a3       	std	Y+36, r24	; 0x24
		sensor_packet->left_center_light_bumber_signal.bytes.low_byte = uart_get_byte(10);
    1928:	8a e0       	ldi	r24, 0x0A	; 10
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	ba d0       	rcall	.+372    	; 0x1aa2 <_Z13uart_get_bytei>
    192e:	8b a3       	std	Y+35, r24	; 0x23
		sensor_packet->right_center_light_bumber_signal.bytes.high_byte = uart_get_byte(11);
    1930:	8b e0       	ldi	r24, 0x0B	; 11
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	b6 d0       	rcall	.+364    	; 0x1aa2 <_Z13uart_get_bytei>
    1936:	8e a3       	std	Y+38, r24	; 0x26
		sensor_packet->right_center_light_bumber_signal.bytes.low_byte = uart_get_byte(12);
    1938:	8c e0       	ldi	r24, 0x0C	; 12
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b2 d0       	rcall	.+356    	; 0x1aa2 <_Z13uart_get_bytei>
    193e:	8d a3       	std	Y+37, r24	; 0x25
		sensor_packet->right_front_light_bumber_signal.bytes.high_byte = uart_get_byte(13);
    1940:	8d e0       	ldi	r24, 0x0D	; 13
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	ae d0       	rcall	.+348    	; 0x1aa2 <_Z13uart_get_bytei>
    1946:	88 a7       	std	Y+40, r24	; 0x28
		sensor_packet->right_front_light_bumber_signal.bytes.low_byte = uart_get_byte(14);
    1948:	8e e0       	ldi	r24, 0x0E	; 14
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	aa d0       	rcall	.+340    	; 0x1aa2 <_Z13uart_get_bytei>
    194e:	8f a3       	std	Y+39, r24	; 0x27
		sensor_packet->right_light_bumber_signal.bytes.high_byte = uart_get_byte(15);
    1950:	8f e0       	ldi	r24, 0x0F	; 15
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a6 d0       	rcall	.+332    	; 0x1aa2 <_Z13uart_get_bytei>
    1956:	8a a7       	std	Y+42, r24	; 0x2a
		sensor_packet->right_light_bumber_signal.bytes.low_byte = uart_get_byte(16);
    1958:	80 e1       	ldi	r24, 0x10	; 16
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a2 d0       	rcall	.+324    	; 0x1aa2 <_Z13uart_get_bytei>
    195e:	89 a7       	std	Y+41, r24	; 0x29
		sensor_packet->left_motor_current.bytes.high_byte = uart_get_byte(17);
    1960:	81 e1       	ldi	r24, 0x11	; 17
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9e d0       	rcall	.+316    	; 0x1aa2 <_Z13uart_get_bytei>
    1966:	8c a7       	std	Y+44, r24	; 0x2c
		sensor_packet->left_motor_current.bytes.low_byte = uart_get_byte(18);
    1968:	82 e1       	ldi	r24, 0x12	; 18
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9a d0       	rcall	.+308    	; 0x1aa2 <_Z13uart_get_bytei>
    196e:	8b a7       	std	Y+43, r24	; 0x2b
		sensor_packet->right_motor_current.bytes.high_byte = uart_get_byte(19);
    1970:	83 e1       	ldi	r24, 0x13	; 19
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	96 d0       	rcall	.+300    	; 0x1aa2 <_Z13uart_get_bytei>
    1976:	8e a7       	std	Y+46, r24	; 0x2e
		sensor_packet->right_motor_current.bytes.low_byte = uart_get_byte(20);
    1978:	84 e1       	ldi	r24, 0x14	; 20
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	92 d0       	rcall	.+292    	; 0x1aa2 <_Z13uart_get_bytei>
    197e:	8d a7       	std	Y+45, r24	; 0x2d
		sensor_packet->main_brush_motor_current.bytes.high_byte = uart_get_byte(21);
    1980:	85 e1       	ldi	r24, 0x15	; 21
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	8e d0       	rcall	.+284    	; 0x1aa2 <_Z13uart_get_bytei>
    1986:	88 ab       	std	Y+48, r24	; 0x30
		sensor_packet->main_brush_motor_current.bytes.low_byte = uart_get_byte(22);
    1988:	86 e1       	ldi	r24, 0x16	; 22
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	8a d0       	rcall	.+276    	; 0x1aa2 <_Z13uart_get_bytei>
    198e:	8f a7       	std	Y+47, r24	; 0x2f
		sensor_packet->side_brush_motor_current.bytes.high_byte = uart_get_byte(23);
    1990:	87 e1       	ldi	r24, 0x17	; 23
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	86 d0       	rcall	.+268    	; 0x1aa2 <_Z13uart_get_bytei>
    1996:	8a ab       	std	Y+50, r24	; 0x32
		sensor_packet->side_brush_motor_current.bytes.low_byte = uart_get_byte(24);
    1998:	88 e1       	ldi	r24, 0x18	; 24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	82 d0       	rcall	.+260    	; 0x1aa2 <_Z13uart_get_bytei>
    199e:	89 ab       	std	Y+49, r24	; 0x31
		break;
	}
	uart_reset_receive();
}
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
		sensor_packet->main_brush_motor_current.bytes.low_byte = uart_get_byte(22);
		sensor_packet->side_brush_motor_current.bytes.high_byte = uart_get_byte(23);
		sensor_packet->side_brush_motor_current.bytes.low_byte = uart_get_byte(24);
		break;
	}
	uart_reset_receive();
    19a6:	54 c0       	rjmp	.+168    	; 0x1a50 <_Z18uart_reset_receivev>

000019a8 <_Z12Roomba_Driveii>:
}

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <_Z12Roomba_Driveii+0x8>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	18 2f       	mov	r17, r24
	Roomba_Send_Byte(DRIVE);
    19b6:	89 e8       	ldi	r24, 0x89	; 137
    19b8:	6b 83       	std	Y+3, r22	; 0x03
    19ba:	7a 83       	std	Y+2, r23	; 0x02
    19bc:	99 83       	std	Y+1, r25	; 0x01
    19be:	11 d0       	rcall	.+34     	; 0x19e2 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(velocity));
    19c0:	99 81       	ldd	r25, Y+1	; 0x01
    19c2:	89 2f       	mov	r24, r25
    19c4:	0e d0       	rcall	.+28     	; 0x19e2 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(velocity));
    19c6:	81 2f       	mov	r24, r17
    19c8:	0c d0       	rcall	.+24     	; 0x19e2 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(radius));
    19ca:	7a 81       	ldd	r23, Y+2	; 0x02
    19cc:	87 2f       	mov	r24, r23
    19ce:	09 d0       	rcall	.+18     	; 0x19e2 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(radius));
    19d0:	6b 81       	ldd	r22, Y+3	; 0x03
    19d2:	86 2f       	mov	r24, r22
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
{
	Roomba_Send_Byte(DRIVE);
	Roomba_Send_Byte(HIGH_BYTE(velocity));
	Roomba_Send_Byte(LOW_BYTE(velocity));
	Roomba_Send_Byte(HIGH_BYTE(radius));
	Roomba_Send_Byte(LOW_BYTE(radius));
    19e0:	00 c0       	rjmp	.+0      	; 0x19e2 <_Z16Roomba_Send_Byteh>

000019e2 <_Z16Roomba_Send_Byteh>:

static volatile uint8_t uart_buffer[UART_BUFFER_SIZE];
static volatile uint8_t uart_buffer_index;

void Roomba_Send_Byte(uint8_t data_out){
	while(! (UCSR1A & (1<<UDRE1)));
    19e2:	90 91 c8 00 	lds	r25, 0x00C8
    19e6:	95 ff       	sbrs	r25, 5
    19e8:	fc cf       	rjmp	.-8      	; 0x19e2 <_Z16Roomba_Send_Byteh>
	UDR1 = data_out;
    19ea:	80 93 ce 00 	sts	0x00CE, r24
    19ee:	08 95       	ret

000019f0 <_Z16Roomba_UART_Init9_uart_bps>:
}

void Roomba_UART_Init(UART_BPS baud){
	uint8_t sreg = SREG;
    19f0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    19f2:	f8 94       	cli
	
	// Make sure I/O clock to USART1 is enabled
	PRR1 &= ~(1 << PRUSART1);
    19f4:	90 91 65 00 	lds	r25, 0x0065
    19f8:	9e 7f       	andi	r25, 0xFE	; 254
    19fa:	90 93 65 00 	sts	0x0065, r25
	
	// Set baud rate to 19.2k at fOSC = 16 MHz
	
	switch(baud) {
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	59 f0       	breq	.+22     	; 0x1a18 <_Z16Roomba_UART_Init9_uart_bps+0x28>
    1a02:	38 f0       	brcs	.+14     	; 0x1a12 <_Z16Roomba_UART_Init9_uart_bps+0x22>
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	59 f0       	breq	.+22     	; 0x1a1e <_Z16Roomba_UART_Init9_uart_bps+0x2e>
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	49 f4       	brne	.+18     	; 0x1a1e <_Z16Roomba_UART_Init9_uart_bps+0x2e>
			break;
		case UART_57600:
			UBRR1 = 16;
			break;
		case UART_115200:
			UBRR1 = 8;
    1a0c:	88 e0       	ldi	r24, 0x08	; 8
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	08 c0       	rjmp	.+16     	; 0x1a22 <_Z16Roomba_UART_Init9_uart_bps+0x32>
	
	// Set baud rate to 19.2k at fOSC = 16 MHz
	
	switch(baud) {
		case UART_19200:
			UBRR1 = 51;
    1a12:	83 e3       	ldi	r24, 0x33	; 51
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	05 c0       	rjmp	.+10     	; 0x1a22 <_Z16Roomba_UART_Init9_uart_bps+0x32>
			break;
		case UART_38400:
			UBRR1 = 25;
    1a18:	89 e1       	ldi	r24, 0x19	; 25
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <_Z16Roomba_UART_Init9_uart_bps+0x32>
			break;
		case UART_115200:
			UBRR1 = 8;
			break;
		default:
			UBRR1 = 16;
    1a1e:	80 e1       	ldi	r24, 0x10	; 16
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	90 93 cd 00 	sts	0x00CD, r25
    1a26:	80 93 cc 00 	sts	0x00CC, r24
	}
	
	// Clear USART Transmit complete flag, normal USART transmission speed
	UCSR1A = (1 << TXC1) | (0 << U2X1);
    1a2a:	80 e4       	ldi	r24, 0x40	; 64
    1a2c:	80 93 c8 00 	sts	0x00C8, r24
	
	// Enable receiver, transmitter, and rx complete interrupt.
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);  
    1a30:	88 e9       	ldi	r24, 0x98	; 152
    1a32:	80 93 c9 00 	sts	0x00C9, r24
	// 8-bit data
	UCSR1C = ((1<<UCSZ11)|(1<<UCSZ10));
    1a36:	86 e0       	ldi	r24, 0x06	; 6
    1a38:	80 93 ca 00 	sts	0x00CA, r24
	// disable 2x speed
	UCSR1A &= ~(1<<U2X1);
    1a3c:	80 91 c8 00 	lds	r24, 0x00C8
    1a40:	8d 7f       	andi	r24, 0xFD	; 253
    1a42:	80 93 c8 00 	sts	0x00C8, r24
	
	
	SREG = sreg;
    1a46:	2f bf       	out	0x3f, r18	; 63
    1a48:	08 95       	ret

00001a4a <_Z19uart_bytes_receivedv>:
}

uint8_t uart_bytes_received(void)
{
	return uart_buffer_index;
    1a4a:	80 91 37 0d 	lds	r24, 0x0D37
}
    1a4e:	08 95       	ret

00001a50 <_Z18uart_reset_receivev>:

void uart_reset_receive(void)
{
	uart_buffer_index = 0;
    1a50:	10 92 37 0d 	sts	0x0D37, r1
    1a54:	08 95       	ret

00001a56 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	0b b6       	in	r0, 0x3b	; 59
    1a62:	0f 92       	push	r0
    1a64:	8f 93       	push	r24
    1a66:	9f 93       	push	r25
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
    uart_buffer[uart_buffer_index] = UDR1;
    1a6c:	e0 91 37 0d 	lds	r30, 0x0D37
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 91 ce 00 	lds	r24, 0x00CE
    1a76:	e8 5c       	subi	r30, 0xC8	; 200
    1a78:	f2 4f       	sbci	r31, 0xF2	; 242
    1a7a:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1a7c:	80 91 37 0d 	lds	r24, 0x0D37
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	8f 71       	andi	r24, 0x1F	; 31
    1a86:	99 27       	eor	r25, r25
    1a88:	80 93 37 0d 	sts	0x0D37, r24
}
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	0f 90       	pop	r0
    1a96:	0b be       	out	0x3b, r0	; 59
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	1f 90       	pop	r1
    1aa0:	18 95       	reti

00001aa2 <_Z13uart_get_bytei>:

uint8_t uart_get_byte(int index)
{
	if (index < UART_BUFFER_SIZE)
    1aa2:	80 32       	cpi	r24, 0x20	; 32
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <_Z13uart_get_bytei+0x10>
	{
		return uart_buffer[index];
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	e8 5c       	subi	r30, 0xC8	; 200
    1aac:	f2 4f       	sbci	r31, 0xF2	; 242
    1aae:	80 81       	ld	r24, Z
    1ab0:	08 95       	ret
	}
	return 0;
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	08 95       	ret

00001ab6 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1ab6:	1f 92       	push	r1
    1ab8:	0f 92       	push	r0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	0f 92       	push	r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	2f 93       	push	r18
    1ac2:	3f 93       	push	r19
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1acc:	80 91 5c 0d 	lds	r24, 0x0D5C
    1ad0:	90 91 5d 0d 	lds	r25, 0x0D5D
    1ad4:	a0 91 5e 0d 	lds	r26, 0x0D5E
    1ad8:	b0 91 5f 0d 	lds	r27, 0x0D5F
	unsigned char f = timer0_fract;
    1adc:	30 91 60 0d 	lds	r19, 0x0D60

	m += MILLIS_INC;
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	a1 1d       	adc	r26, r1
    1ae4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1ae6:	23 2f       	mov	r18, r19
    1ae8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1aea:	2d 37       	cpi	r18, 0x7D	; 125
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__vector_23+0x40>
		f -= FRACT_MAX;
    1aee:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	a1 1d       	adc	r26, r1
    1af4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1af6:	20 93 60 0d 	sts	0x0D60, r18
	timer0_millis = m;
    1afa:	80 93 5c 0d 	sts	0x0D5C, r24
    1afe:	90 93 5d 0d 	sts	0x0D5D, r25
    1b02:	a0 93 5e 0d 	sts	0x0D5E, r26
    1b06:	b0 93 5f 0d 	sts	0x0D5F, r27
	timer0_overflow_count++;
    1b0a:	80 91 58 0d 	lds	r24, 0x0D58
    1b0e:	90 91 59 0d 	lds	r25, 0x0D59
    1b12:	a0 91 5a 0d 	lds	r26, 0x0D5A
    1b16:	b0 91 5b 0d 	lds	r27, 0x0D5B
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	b1 1d       	adc	r27, r1
    1b20:	80 93 58 0d 	sts	0x0D58, r24
    1b24:	90 93 59 0d 	sts	0x0D59, r25
    1b28:	a0 93 5a 0d 	sts	0x0D5A, r26
    1b2c:	b0 93 5b 0d 	sts	0x0D5B, r27
}
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	3f 91       	pop	r19
    1b3a:	2f 91       	pop	r18
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	0f 90       	pop	r0
    1b42:	1f 90       	pop	r1
    1b44:	18 95       	reti

00001b46 <_exit>:
    1b46:	f8 94       	cli

00001b48 <__stop_program>:
    1b48:	ff cf       	rjmp	.-2      	; 0x1b48 <__stop_program>
