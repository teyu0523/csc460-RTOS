
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800200  00800200  00000270  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c5e  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000043d  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000853  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000138  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006a2  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004d3  00000000  00000000  0000240a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  000028dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c0       	rjmp	.+222    	; 0x124 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 30       	cpi	r26, 0x05	; 5
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	69 d0       	rcall	.+210    	; 0x1f2 <main>
 120:	6b c0       	rjmp	.+214    	; 0x1f8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_17>:
     * of SREG. We know it should have interrupts enabled because this
     * ISR was able to execute, but it has interrupts disabled because
     * it was stored while this ISR was executing. So we set the bit (I = bit 7)
     * in the stored value.
     */
    SAVE_CTX_TOP();
 124:	ff 93       	push	r31
 126:	ff b7       	in	r31, 0x3f	; 63
 128:	f8 94       	cli

    STACK_SREG_SET_I_BIT();
 12a:	f0 68       	ori	r31, 0x80	; 128

    SAVE_CTX_BOTTOM();
 12c:	ff 93       	push	r31
 12e:	ef 93       	push	r30
 130:	df 93       	push	r29
 132:	cf 93       	push	r28
 134:	bf 93       	push	r27
 136:	af 93       	push	r26
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	7f 93       	push	r23
 13e:	6f 93       	push	r22
 140:	5f 93       	push	r21
 142:	4f 93       	push	r20
 144:	3f 93       	push	r19
 146:	2f 93       	push	r18
 148:	1f 93       	push	r17
 14a:	0f 93       	push	r16
 14c:	ff 92       	push	r15
 14e:	ef 92       	push	r14
 150:	df 92       	push	r13
 152:	cf 92       	push	r12
 154:	bf 92       	push	r11
 156:	af 92       	push	r10
 158:	9f 92       	push	r9
 15a:	8f 92       	push	r8
 15c:	7f 92       	push	r7
 15e:	6f 92       	push	r6
 160:	5f 92       	push	r5
 162:	4f 92       	push	r4
 164:	3f 92       	push	r3
 166:	2f 92       	push	r2
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0

    cur_task->sp = (uint8_t*)SP;
 16c:	e0 91 03 02 	lds	r30, 0x0203
 170:	f0 91 04 02 	lds	r31, 0x0204
 174:	8d b7       	in	r24, 0x3d	; 61
 176:	9e b7       	in	r25, 0x3e	; 62
 178:	f3 95       	inc	r31
 17a:	91 83       	std	Z+1, r25	; 0x01
 17c:	80 83       	st	Z, r24
    /*
     * Now that we already saved a copy of the stack pointer
     * for every context including the kernel, we can move to
     * the kernel stack and use it. We will restore it again later.
     */
    SP = kernel_sp;
 17e:	80 91 01 02 	lds	r24, 0x0201
 182:	90 91 02 02 	lds	r25, 0x0202
 186:	9e bf       	out	0x3e, r25	; 62
 188:	8d bf       	out	0x3d, r24	; 61

    /*
     * Inform the kernel that this task was interrupted.
     */
    kernel_request = TIMER_EXPIRED;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 00 02 	sts	0x0200, r24

    /*
     * Prepare for next tick interrupt.
     */
    OCR1A += TICK_CYCLES;
 190:	e8 e8       	ldi	r30, 0x88	; 136
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	80 5f       	subi	r24, 0xF0	; 240
 19a:	98 4d       	sbci	r25, 0xD8	; 216
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	80 83       	st	Z, r24

    /*
     * Restore the kernel context. (The stack pointer is restored again.)
     */
    SP = kernel_sp;
 1a0:	80 91 01 02 	lds	r24, 0x0201
 1a4:	90 91 02 02 	lds	r25, 0x0202
 1a8:	9e bf       	out	0x3e, r25	; 62
 1aa:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	2f 90       	pop	r2
 1b2:	3f 90       	pop	r3
 1b4:	4f 90       	pop	r4
 1b6:	5f 90       	pop	r5
 1b8:	6f 90       	pop	r6
 1ba:	7f 90       	pop	r7
 1bc:	8f 90       	pop	r8
 1be:	9f 90       	pop	r9
 1c0:	af 90       	pop	r10
 1c2:	bf 90       	pop	r11
 1c4:	cf 90       	pop	r12
 1c6:	df 90       	pop	r13
 1c8:	ef 90       	pop	r14
 1ca:	ff 90       	pop	r15
 1cc:	0f 91       	pop	r16
 1ce:	1f 91       	pop	r17
 1d0:	2f 91       	pop	r18
 1d2:	3f 91       	pop	r19
 1d4:	4f 91       	pop	r20
 1d6:	5f 91       	pop	r21
 1d8:	6f 91       	pop	r22
 1da:	7f 91       	pop	r23
 1dc:	8f 91       	pop	r24
 1de:	9f 91       	pop	r25
 1e0:	af 91       	pop	r26
 1e2:	bf 91       	pop	r27
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	ef 91       	pop	r30
 1ea:	ff 91       	pop	r31
 1ec:	ff bf       	out	0x3f, r31	; 63
 1ee:	ff 91       	pop	r31
     * Explilictly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
 1f0:	08 95       	ret

000001f2 <main>:

    Task_Create(round_robin, 0, RR, 0);

    Event_Wait(print_event);
    print_trace();*/
}
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
