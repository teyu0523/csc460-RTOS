# 1 ".././os.cpp"
# 1 "E:\\Google Drive\\Course\\csc460\\lab\\CSC460\\csc460-RTOS\\Project 2\\atmel\\project2\\project2\\Debug//"
# 1 "<command-line>"
# 1 ".././os.cpp"
# 12 ".././os.cpp"
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 1 3
# 37 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\lib\\gcc\\avr\\4.8.1\\include\\stdint.h" 1 3 4
# 9 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\lib\\gcc\\avr\\4.8.1\\include\\stdint.h" 3 4
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 1 3 4
# 121 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 142 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 159 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 213 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 273 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\lib\\gcc\\avr\\4.8.1\\include\\stdint.h" 2 3 4
# 38 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 174 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\iom2560.h" 1 3
# 38 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\iom2560.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\iomxx0_1.h" 1 3
# 1613 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\iomxx0_1.h" 3
       
# 1614 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\iomxx0_1.h" 3

       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
# 39 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\iom2560.h" 2 3
# 175 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 616 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 1 3
# 617 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 1 3
# 619 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\version.h" 1 3
# 621 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 1 3
# 239 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 628 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 1 3
# 631 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 13 ".././os.cpp" 2
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 1 3
# 14 ".././os.cpp" 2
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 1 3
# 43 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay_basic.h" 1 3
# 40 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay_basic.h" 3
static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
# 80 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay_basic.h" 3
void
_delay_loop_1(uint8_t __count)
{
 __asm__ volatile (
  "1: dec %0" "\n\t"
  "brne 1b"
  : "=r" (__count)
  : "0" (__count)
 );
}
# 102 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay_basic.h" 3
void
_delay_loop_2(uint16_t __count)
{
 __asm__ volatile (
  "1: sbiw %0,1" "\n\t"
  "brne 1b"
  : "=w" (__count)
  : "0" (__count)
 );
}
# 44 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 2 3
# 1 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 1 3
# 121 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern "C" {





extern double cos(double __x) __attribute__((__const__));





extern double sin(double __x) __attribute__((__const__));





extern double tan(double __x) __attribute__((__const__));






extern double fabs(double __x) __attribute__((__const__));






extern double fmod(double __x, double __y) __attribute__((__const__));
# 168 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern double modf(double __x, double *__iptr);



extern float modff (float __x, float *__iptr);




extern double sqrt(double __x) __attribute__((__const__));





extern double cbrt(double __x) __attribute__((__const__));
# 194 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern double hypot (double __x, double __y) __attribute__((__const__));







extern double square(double __x) __attribute__((__const__));






extern double floor(double __x) __attribute__((__const__));






extern double ceil(double __x) __attribute__((__const__));
# 234 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern double frexp(double __x, int *__pexp);







extern double ldexp(double __x, int __exp) __attribute__((__const__));





extern double exp(double __x) __attribute__((__const__));





extern double cosh(double __x) __attribute__((__const__));





extern double sinh(double __x) __attribute__((__const__));





extern double tanh(double __x) __attribute__((__const__));







extern double acos(double __x) __attribute__((__const__));







extern double asin(double __x) __attribute__((__const__));






extern double atan(double __x) __attribute__((__const__));
# 298 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern double atan2(double __y, double __x) __attribute__((__const__));





extern double log(double __x) __attribute__((__const__));





extern double log10(double __x) __attribute__((__const__));





extern double pow(double __x, double __y) __attribute__((__const__));






extern int isnan(double __x) __attribute__((__const__));
# 333 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern int isinf(double __x) __attribute__((__const__));






__attribute__((__const__)) static inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
 "mov	%0, %C1		\n\t"
 "lsl	%0		\n\t"
 "mov	%0, %D1		\n\t"
 "rol	%0		"
 : "=r" (__exp)
 : "r" (__x) );
    return __exp != 0xff;
}






__attribute__((__const__)) static inline double copysign (double __x, double __y)
{
    __asm__ (
 "bst	%D2, 7	\n\t"
 "bld	%D0, 7	"
 : "=r" (__x)
 : "0" (__x), "r" (__y) );
    return __x;
}
# 376 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern int signbit (double __x) __attribute__((__const__));






extern double fdim (double __x, double __y) __attribute__((__const__));
# 392 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern double fma (double __x, double __y, double __z) __attribute__((__const__));







extern double fmax (double __x, double __y) __attribute__((__const__));







extern double fmin (double __x, double __y) __attribute__((__const__));






extern double trunc (double __x) __attribute__((__const__));
# 426 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern double round (double __x) __attribute__((__const__));
# 439 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern long lround (double __x) __attribute__((__const__));
# 453 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\math.h" 3
extern long lrint (double __x) __attribute__((__const__));



}
# 45 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 2 3
# 84 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
static inline void _delay_us(double __us) __attribute__((always_inline));
static inline void _delay_ms(double __ms) __attribute__((always_inline));
# 141 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
void
_delay_ms(double __ms)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((16000000L) / 1e3) * __ms;
# 160 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 186 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
}
# 223 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
void
_delay_us(double __us)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((16000000L) / 1e6) * __us;
# 242 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 268 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1061\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h" 3
}
# 15 ".././os.cpp" 2

# 1 ".././os.h" 1




extern "C" {
# 224 ".././os.h"
typedef struct service SERVICE;
# 255 ".././os.h"
void OS_Abort();
# 273 ".././os.h"
int8_t Task_Create_System(void (*f)(void), int16_t arg);
int8_t Task_Create_RR( void (*f)(void), int16_t arg);
int Task_Create(void (*f)(void), int arg, unsigned int level, unsigned int name);
# 292 ".././os.h"
int8_t Task_Create_Periodic(void(*f)(void), int16_t arg, uint16_t period, uint16_t wcet, uint16_t start);







void Task_Terminate();


void Task_Next();




int16_t Task_GetArg();
# 319 ".././os.h"
SERVICE *Service_Init();
# 329 ".././os.h"
void Service_Subscribe( SERVICE *s, int16_t *v );
# 339 ".././os.h"
void Service_Publish( SERVICE *s, int16_t v );
# 359 ".././os.h"
uint16_t Now();


}
# 17 ".././os.cpp" 2
# 1 ".././kernel.h" 1
# 15 ".././kernel.h"
extern "C" {
# 44 ".././kernel.h"
typedef void (*voidfuncvoid_ptr) (void);




typedef enum
{
    DEAD = 0,
    RUNNING,
    READY,
    WAITING
}
task_state_t;




typedef enum
{
    NONE = 0,
    TIMER_EXPIRED,
    TASK_CREATE,
    TASK_TERMINATE,
    TASK_NEXT,
    TASK_GET_ARG,
}
kernel_request_t;





typedef struct
{

    voidfuncvoid_ptr f;

    int arg;

    uint8_t level;



 uint16_t period;
 uint16_t wcet;
 uint16_t start;
}
create_args_t;


typedef struct td_struct task_descriptor_t;



struct td_struct
{

    uint8_t stack[256];

    uint8_t* volatile sp;

 uint16_t period;
 uint16_t wcet;
 uint16_t start;


    task_state_t state;

    int arg;

    uint8_t level;

    task_descriptor_t* next;

 task_descriptor_t* prev;
};

typedef struct
{
 task_descriptor_t* head;
 task_descriptor_t* tail;
}
linkedlist_t;




typedef struct
{

    task_descriptor_t* head;

    task_descriptor_t* tail;
}
queue_t;


}
# 18 ".././os.cpp" 2
# 1 ".././error_code.h" 1
# 16 ".././error_code.h"
enum {




ERR_1_PPP_NAME_OUT_OF_RANGE,


ERR_2_CREATE_NAME_OUT_OF_RANGE,


ERR_3_PERIODIC_NAMED_IDLE,


ERR_4_PERIODIC_NAME_IN_USE,


ERR_5_NAME_NOT_IN_PPP,


ERR_6_TIME_INTERVAL_IN_PPP_0,





ERR_RUN_1_USER_CALLED_OS_ABORT,


ERR_RUN_2_TOO_MANY_TASKS,


ERR_RUN_3_PERIODIC_TOOK_TOO_LONG,


ERR_RUN_4_ILLEGAL_ISR_KERNEL_REQUEST,


ERR_RUN_5_RTOS_INTERNAL_ERROR,

};
# 19 ".././os.cpp" 2






int r_main();
# 36 ".././os.cpp"
static task_descriptor_t* cur_task = 0;


static task_descriptor_t* next_task_periodic = 0;


static volatile uint16_t kernel_sp;


static task_descriptor_t task_desc[8 + 1];


static task_descriptor_t* idle_task = &task_desc[8];


static volatile kernel_request_t kernel_request;


static volatile create_args_t kernel_request_create_args;


static volatile int kernel_request_retval;


static queue_t dead_pool_queue;


static queue_t rr_queue;


static linkedlist_t periodic_queue;


static queue_t system_queue;


static volatile uint8_t ticks_remaining = 0;
static volatile uint8_t ticks_counter = 0;

static uint8_t slot_task_finished = 0;


static unsigned int slot_name_index = 0;


static task_descriptor_t* name_to_task_ptr[8 + 1];





static uint8_t volatile error_msg = ERR_RUN_1_USER_CALLED_OS_ABORT;




static void kernel_main_loop(void);
static void kernel_dispatch(void);
static void kernel_handle_request(void);

static void exit_kernel(void) __attribute((noinline, naked));
static void enter_kernel(void) __attribute((noinline, naked));
extern "C" void __vector_17(void) __attribute__ ((signal, naked));

static int kernel_create_task();
static void kernel_terminate_task(void);

static void addlist(linkedlist_t* linkedlist_ptr, task_descriptor_t* task_to_add);
static task_descriptor_t* get_next(linkedlist_t* linkedlist_ptr, task_descriptor_t* task_to_find_before);
static void delete_task(linkedlist_t* linkedlist_ptr, task_descriptor_t* task_to_delete);


static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add);
static task_descriptor_t* dequeue(queue_t* queue_ptr);

static void kernel_update_ticker(void);

static void idle (void);
static void _delay_25ms(void);







static void idle (void)
{
    for(;;)
    {};
}
# 143 ".././os.cpp"
static void kernel_main_loop(void)
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();




        kernel_handle_request();
    }
}
# 167 ".././os.cpp"
static void kernel_dispatch(void)
{




    if(cur_task->state != RUNNING || cur_task == idle_task)
    {
  if(system_queue.head != 0)
        {
            cur_task = dequeue(&system_queue);
        }

        else if(periodic_queue.head != 0)
        {



            cur_task = get_next(&periodic_queue, cur_task);
   ticks_remaining = cur_task->period;
        }
        else if(rr_queue.head != 0)
        {
            cur_task = dequeue(&rr_queue);
        }
        else
        {

            cur_task = idle_task;
        }

        cur_task->state = RUNNING;
    }
}
# 211 ".././os.cpp"
static void kernel_handle_request(void)
{
   switch(kernel_request)
    {
    case NONE:

        break;

    case TIMER_EXPIRED:
        kernel_update_ticker();


        if(cur_task->level == 1 && cur_task->state == RUNNING)
        {
            cur_task->state = READY;
            enqueue(&rr_queue, cur_task);
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();




        if(kernel_request_retval)
        {

            if(kernel_request_create_args.level == 3 && cur_task->level != 3)
            {
                cur_task->state = READY;
            }


            if(cur_task->level == 1 &&
               kernel_request_create_args.level == 2)

            {
                cur_task->state = READY;
            }


            if(cur_task->level == 1 && cur_task->state == READY)
            {
                enqueue(&rr_queue, cur_task);
            }
        }
        break;

    case TASK_TERMINATE:
  if(cur_task != idle_task)
  {
         kernel_terminate_task();
  }
        break;

    case TASK_NEXT:
  switch(cur_task->level)
  {
     case 3:
         enqueue(&system_queue, cur_task);
   break;

     case 2:
         slot_task_finished = 1;
            addlist(&periodic_queue, cur_task);
         break;

     case 1:
         enqueue(&rr_queue, cur_task);
         break;

     default:
   break;
  }

  cur_task->state = READY;
        break;

    case TASK_GET_ARG:

        break;

    default:

        error_msg = -1;
        OS_Abort();
        break;
    }
    kernel_request = NONE;
}
# 427 ".././os.cpp"
static void exit_kernel(void)
{




     asm volatile ( "push   r31             \n\t" "in     r31,0X3C        \n\t" "push   r31             \n\t" "in     r31,__SREG__    \n\t" "cli                    \n\t"::);;asm volatile ( "push   r31             \n\t" "push   r30             \n\t" "push   r29             \n\t" "push   r28             \n\t" "push   r27             \n\t" "push   r26             \n\t" "push   r25             \n\t" "push   r24             \n\t" "push   r23             \n\t" "push   r22             \n\t" "push   r21             \n\t" "push   r20             \n\t" "push   r19             \n\t" "push   r18             \n\t" "push   r17             \n\t" "push   r16             \n\t" "push   r15             \n\t" "push   r14             \n\t" "push   r13             \n\t" "push   r12             \n\t" "push   r11             \n\t" "push   r10             \n\t" "push   r9              \n\t" "push   r8              \n\t" "push   r7              \n\t" "push   r6              \n\t" "push   r5              \n\t" "push   r4              \n\t" "push   r3              \n\t" "push   r2              \n\t" "push   r1              \n\t" "push   r0              \n\t"::);;;




    kernel_sp = (*(volatile uint16_t *)((0x3D) + 0x20));




    (*(volatile uint16_t *)((0x3D) + 0x20)) = (uint16_t)(cur_task->sp);




    asm volatile ( "pop    r0                \n\t" "pop    r1                \n\t" "pop    r2                \n\t" "pop    r3                \n\t" "pop    r4                \n\t" "pop    r5                \n\t" "pop    r6                \n\t" "pop    r7                \n\t" "pop    r8                \n\t" "pop    r9                \n\t" "pop    r10             \n\t" "pop    r11             \n\t" "pop    r12             \n\t" "pop    r13             \n\t" "pop    r14             \n\t" "pop    r15             \n\t" "pop    r16             \n\t" "pop    r17             \n\t" "pop    r18             \n\t" "pop    r19             \n\t" "pop    r20             \n\t" "pop    r21             \n\t" "pop    r22             \n\t" "pop    r23             \n\t" "pop    r24             \n\t" "pop    r25             \n\t" "pop    r26             \n\t" "pop    r27             \n\t" "pop    r28             \n\t" "pop    r29             \n\t" "pop    r30             \n\t"::);;asm volatile ( "pop    r31             \n\t" "out    __SREG__, r31   \n\t" "pop    r31             \n\t" "out    0X3C, r31       \n\t" "pop    r31             \n\t"::);;;
# 459 ".././os.cpp"
    asm volatile ("ret\n"::);
}
# 472 ".././os.cpp"
static void enter_kernel(void)
{




    asm volatile ( "push   r31             \n\t" "in     r31,0X3C        \n\t" "push   r31             \n\t" "in     r31,__SREG__    \n\t" "cli                    \n\t"::);;asm volatile ( "push   r31             \n\t" "push   r30             \n\t" "push   r29             \n\t" "push   r28             \n\t" "push   r27             \n\t" "push   r26             \n\t" "push   r25             \n\t" "push   r24             \n\t" "push   r23             \n\t" "push   r22             \n\t" "push   r21             \n\t" "push   r20             \n\t" "push   r19             \n\t" "push   r18             \n\t" "push   r17             \n\t" "push   r16             \n\t" "push   r15             \n\t" "push   r14             \n\t" "push   r13             \n\t" "push   r12             \n\t" "push   r11             \n\t" "push   r10             \n\t" "push   r9              \n\t" "push   r8              \n\t" "push   r7              \n\t" "push   r6              \n\t" "push   r5              \n\t" "push   r4              \n\t" "push   r3              \n\t" "push   r2              \n\t" "push   r1              \n\t" "push   r0              \n\t"::);;;




    cur_task->sp = (uint8_t*)(*(volatile uint16_t *)((0x3D) + 0x20));




    (*(volatile uint16_t *)((0x3D) + 0x20)) = kernel_sp;




    asm volatile ( "pop    r0                \n\t" "pop    r1                \n\t" "pop    r2                \n\t" "pop    r3                \n\t" "pop    r4                \n\t" "pop    r5                \n\t" "pop    r6                \n\t" "pop    r7                \n\t" "pop    r8                \n\t" "pop    r9                \n\t" "pop    r10             \n\t" "pop    r11             \n\t" "pop    r12             \n\t" "pop    r13             \n\t" "pop    r14             \n\t" "pop    r15             \n\t" "pop    r16             \n\t" "pop    r17             \n\t" "pop    r18             \n\t" "pop    r19             \n\t" "pop    r20             \n\t" "pop    r21             \n\t" "pop    r22             \n\t" "pop    r23             \n\t" "pop    r24             \n\t" "pop    r25             \n\t" "pop    r26             \n\t" "pop    r27             \n\t" "pop    r28             \n\t" "pop    r29             \n\t" "pop    r30             \n\t"::);;asm volatile ( "pop    r31             \n\t" "out    __SREG__, r31   \n\t" "pop    r31             \n\t" "out    0X3C, r31       \n\t" "pop    r31             \n\t"::);;;







    asm volatile ("ret\n"::);
}
# 519 ".././os.cpp"
void __vector_17(void)
{
# 533 ".././os.cpp"
    asm volatile ( "push   r31             \n\t" "in     r31,0X3C        \n\t" "push   r31             \n\t" "in     r31,__SREG__    \n\t" "cli                    \n\t"::);;

    asm volatile ( "ori    r31, 0x80        \n\t"::);;

    asm volatile ( "push   r31             \n\t" "push   r30             \n\t" "push   r29             \n\t" "push   r28             \n\t" "push   r27             \n\t" "push   r26             \n\t" "push   r25             \n\t" "push   r24             \n\t" "push   r23             \n\t" "push   r22             \n\t" "push   r21             \n\t" "push   r20             \n\t" "push   r19             \n\t" "push   r18             \n\t" "push   r17             \n\t" "push   r16             \n\t" "push   r15             \n\t" "push   r14             \n\t" "push   r13             \n\t" "push   r12             \n\t" "push   r11             \n\t" "push   r10             \n\t" "push   r9              \n\t" "push   r8              \n\t" "push   r7              \n\t" "push   r6              \n\t" "push   r5              \n\t" "push   r4              \n\t" "push   r3              \n\t" "push   r2              \n\t" "push   r1              \n\t" "push   r0              \n\t"::);;

    cur_task->sp = (uint8_t*)(*(volatile uint16_t *)((0x3D) + 0x20));






    (*(volatile uint16_t *)((0x3D) + 0x20)) = kernel_sp;




    kernel_request = TIMER_EXPIRED;




    (*(volatile uint16_t *)(0x88)) += (((16000000L / 8) / 1000) * 5);




    (*(volatile uint16_t *)((0x3D) + 0x20)) = kernel_sp;




    asm volatile ( "pop    r0                \n\t" "pop    r1                \n\t" "pop    r2                \n\t" "pop    r3                \n\t" "pop    r4                \n\t" "pop    r5                \n\t" "pop    r6                \n\t" "pop    r7                \n\t" "pop    r8                \n\t" "pop    r9                \n\t" "pop    r10             \n\t" "pop    r11             \n\t" "pop    r12             \n\t" "pop    r13             \n\t" "pop    r14             \n\t" "pop    r15             \n\t" "pop    r16             \n\t" "pop    r17             \n\t" "pop    r18             \n\t" "pop    r19             \n\t" "pop    r20             \n\t" "pop    r21             \n\t" "pop    r22             \n\t" "pop    r23             \n\t" "pop    r24             \n\t" "pop    r25             \n\t" "pop    r26             \n\t" "pop    r27             \n\t" "pop    r28             \n\t" "pop    r29             \n\t" "pop    r30             \n\t"::);;asm volatile ( "pop    r31             \n\t" "out    __SREG__, r31   \n\t" "pop    r31             \n\t" "out    0X3C, r31       \n\t" "pop    r31             \n\t"::);;;
# 576 ".././os.cpp"
    asm volatile ("ret\n"::);
}
# 591 ".././os.cpp"
static int kernel_create_task()
{

    task_descriptor_t *p;
    uint8_t* stack_bottom;


    if (dead_pool_queue.head == 0)
    {

        return 0;
    }
# 629 ".././os.cpp"
 if(kernel_request_create_args.level == 0)
 {
  p = &task_desc[8];
 }

 else
 {
     p = dequeue(&dead_pool_queue);
 }

    stack_bottom = &(p->stack[256 -1]);
# 650 ".././os.cpp"
    uint8_t* stack_top = stack_bottom - (32 + 1 + 2 + 2);






    stack_top[2] = (uint8_t) 0;

    stack_top[32] = (uint8_t) (1 << ((7)));
# 668 ".././os.cpp"
  stack_top[35] = (uint8_t)(0);
  stack_top[36] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
  stack_top[37] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
  stack_top[38] = (uint8_t)(0);
  stack_top[39] = (uint8_t)((uint16_t)Task_Terminate >> 8);
  stack_top[40] = (uint8_t)(uint16_t)Task_Terminate;
# 684 ".././os.cpp"
    p->sp = stack_top;

    p->state = READY;
    p->arg = kernel_request_create_args.arg;
    p->level = kernel_request_create_args.level;


 switch(kernel_request_create_args.level)
 {
 case 2:


  addlist(&periodic_queue, p);
        break;

    case 3:

        enqueue(&system_queue, p);
  break;

    case 1:

        enqueue(&rr_queue, p);
  break;

 default:

  break;
 }


    return 1;
}





static void kernel_terminate_task(void)
{

    cur_task->state = DEAD;
    if(cur_task->level == 2)
    {
        delete_task(&periodic_queue, cur_task);
    }
    enqueue(&dead_pool_queue, cur_task);
}




static void delete_task(linkedlist_t* linkedlist_ptr, task_descriptor_t* task_to_delete)
{

 if(linkedlist_ptr->head == task_to_delete && linkedlist_ptr->head->next != 0)
 {
  linkedlist_ptr->head = linkedlist_ptr->head->next;
  linkedlist_ptr->head->prev = 0;
  return;
 } else if (linkedlist_ptr->tail == task_to_delete && linkedlist_ptr->tail->prev != 0) {
  linkedlist_ptr->tail = linkedlist_ptr->tail->prev;
  linkedlist_ptr->tail->next = 0;
  return;
 } else if (linkedlist_ptr->tail == task_to_delete && linkedlist_ptr->head == task_to_delete) {
  linkedlist_ptr->tail = 0;
  linkedlist_ptr->head = 0;
  return;
 }
 task_descriptor_t* temp = linkedlist_ptr->head;
 while(temp!=0)
 {
  if (temp == task_to_delete){
   temp = temp->prev;
   temp->next = temp->next->next;
   temp->next->prev = temp;
   return;
  }
  temp = temp->next;
 }

}



static task_descriptor_t* get_next(linkedlist_t* linkedlist_ptr, task_descriptor_t* task_to_find_before)
{
 if(task_to_find_before == 0)
 {
  return linkedlist_ptr->head;
 }
 task_descriptor_t* temp = linkedlist_ptr->head;
 while(temp!=0)
 {
  if(temp == task_to_find_before)
  {
   return temp->next;
  }
  temp = temp->next;
 }
 return 0;
}




static void addlist(linkedlist_t* linkedlist_ptr, task_descriptor_t* task_to_add)
{
 task_to_add->next = 0;
  if(linkedlist_ptr->head == 0)
  {

   task_to_add->prev = 0;
   linkedlist_ptr->head = task_to_add;
   linkedlist_ptr->tail = task_to_add;
  }
  else
  {

   linkedlist_ptr->tail->next = task_to_add;
   task_to_add->prev = linkedlist_ptr->tail;
   linkedlist_ptr->tail = task_to_add;
  }
}
# 819 ".././os.cpp"
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = 0;

    if(queue_ptr->head == 0)
    {

        queue_ptr->head = task_to_add;
        queue_ptr->tail = task_to_add;
    }
    else
    {

        queue_ptr->tail->next = task_to_add;
        queue_ptr->tail = task_to_add;
    }
}
# 844 ".././os.cpp"
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != 0)
    {
        queue_ptr->head = queue_ptr->head->next;
        task_ptr->next = 0;
    }

    return task_ptr;
}







static void kernel_update_ticker(void)
{



 ++ticks_counter;
 --ticks_remaining;
 if(ticks_remaining == 0)
 {

  if(next_task_periodic == 0){
   while(next_task_periodic!=0){
    next_task_periodic = get_next(&periodic_queue, cur_task);
    if(next_task_periodic->start > ticks_counter%20)
    {
     break;
    }
   }
   cur_task = dequeue(&rr_queue);
  }else{
   if(next_task_periodic->start == ticks_counter%20)
   {
    cur_task = next_task_periodic;
    next_task_periodic = 0;
    ticks_remaining = cur_task->period;
   }else{
    cur_task = dequeue(&rr_queue);
   }
  }
 }
 else if (ticks_remaining+cur_task->start > ticks_counter%100)
 {
  OS_Abort();
 }
# 931 ".././os.cpp"
}
# 980 ".././os.cpp"
void OS_Init()
{
    int i;



    (*(volatile uint8_t *)(0x81)) |= ((1 << (1)));
# 999 ".././os.cpp"
    for (i = 0; i < 8 - 1; i++)
    {
        task_desc[i].state = DEAD;
        name_to_task_ptr[i] = 0;
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[8 - 1].next = 0;
    dead_pool_queue.head = &task_desc[0];
    dead_pool_queue.tail = &task_desc[8 - 1];


    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
    kernel_request_create_args.level = 0;
    kernel_create_task();


    kernel_request_create_args.f = (voidfuncvoid_ptr)r_main;
    kernel_request_create_args.level = 3;
    kernel_create_task();


    cur_task = task_desc;
    cur_task->state = RUNNING;
    dequeue(&system_queue);
# 1031 ".././os.cpp"
    (*(volatile uint8_t *)(0x6F)) |= (1 << (1));
    (*(volatile uint16_t *)(0x88)) = (*(volatile uint16_t *)(0x84)) + (((16000000L / 8) / 1000) * 5);

    (*(volatile uint8_t *)((0x16) + 0x20)) = (1 << (1));




    kernel_main_loop();
}







static void _delay_25ms(void)
{




    _delay_ms(25);
}





void OS_Abort(void)
{
    uint8_t i, j;
    uint8_t flashes, mask;

    asm volatile ("cli"::);


    (*(volatile uint8_t *)((0x0A) + 0x20)) = (uint8_t)((1 << (4)) | (1 << (7))) | (uint8_t)((1 << (5)) | (1 << (6)));

    if(error_msg < ERR_RUN_1_USER_CALLED_OS_ABORT)
    {
        flashes = error_msg + 1;
        mask = (uint8_t)((1 << (5)) | (1 << (6)));
    }
    else
    {
        flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
        mask = (uint8_t)((1 << (4)) | (1 << (7)));
    }


    for(;;)
    {
        (*(volatile uint8_t *)((0x0B) + 0x20)) = (uint8_t)((uint8_t)((1 << (4)) | (1 << (7))) | (uint8_t)((1 << (5)) | (1 << (6))));

        for(i = 0; i < 100; ++i)
        {
               _delay_25ms();
        }

        (*(volatile uint8_t *)((0x0B) + 0x20)) = (uint8_t) 0;

        for(i = 0; i < 40; ++i)
        {
               _delay_25ms();
        }


        for(j = 0; j < flashes; ++j)
        {
            (*(volatile uint8_t *)((0x0B) + 0x20)) = mask;

            for(i = 0; i < 10; ++i)
            {
                _delay_25ms();
            }

            (*(volatile uint8_t *)((0x0B) + 0x20)) = (uint8_t) 0;

            for(i = 0; i < 10; ++i)
            {
                _delay_25ms();
            }
        }

        for(i = 0; i < 20; ++i)
        {
            _delay_25ms();
        }
    }
}
# 1150 ".././os.cpp"
void Service_Subscribe( SERVICE *s, int16_t *v )
{

}
# 1163 ".././os.cpp"
void Service_Publish( SERVICE *s, int16_t v )
{

}
# 1181 ".././os.cpp"
int8_t Task_Create_System(void (*f)(void), int16_t arg)
{
     int8_t retval;
     uint8_t sreg;

     sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
     asm volatile ("cli"::);

     kernel_request_create_args.f = (voidfuncvoid_ptr)f;
     kernel_request_create_args.arg = arg;
     kernel_request_create_args.level = (uint8_t)3;


     kernel_request = TASK_CREATE;
     enter_kernel();

     retval = kernel_request_retval;
     (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;

     return retval;
}

int8_t Task_Create_RR(void (*f)(void), int16_t arg)
{
  int8_t retval;
  uint8_t sreg;

  sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
  asm volatile ("cli"::);

  kernel_request_create_args.f = (voidfuncvoid_ptr)f;
  kernel_request_create_args.arg = arg;
  kernel_request_create_args.level = (uint8_t)1;


  kernel_request = TASK_CREATE;
  enter_kernel();

  retval = kernel_request_retval;
  (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;

  return retval;
}
# 1240 ".././os.cpp"
int8_t Task_Create_Periodic(void(*f)(void), int16_t arg, uint16_t period, uint16_t wcet, uint16_t start)
{
 int8_t retval;
 uint8_t sreg;

 sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
 asm volatile ("cli"::);

 kernel_request_create_args.f = (voidfuncvoid_ptr)f;
 kernel_request_create_args.arg = arg;
 kernel_request_create_args.level = (uint8_t)2;
 kernel_request_create_args.period = period;
 kernel_request_create_args.wcet = wcet;
 kernel_request_create_args.start = start;


 kernel_request = TASK_CREATE;
 enter_kernel();

 retval = kernel_request_retval;
 (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;

 return retval;
}
# 1281 ".././os.cpp"
int Task_Create(void (*f)(void), int arg, unsigned int level, unsigned int name)
{
    int retval;
    uint8_t sreg;

    sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
    asm volatile ("cli"::);

    kernel_request_create_args.f = (voidfuncvoid_ptr)f;
    kernel_request_create_args.arg = arg;
    kernel_request_create_args.level = (uint8_t)level;


    kernel_request = TASK_CREATE;
    enter_kernel();

    retval = kernel_request_retval;
    (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;

    return retval;
}





void Task_Next()
{
    uint8_t volatile sreg;

    sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
    asm volatile ("cli"::);

    kernel_request = TASK_NEXT;
    enter_kernel();

    (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;
}





void Task_Terminate()
{
    uint8_t sreg;

    sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
    asm volatile ("cli"::);

    kernel_request = TASK_TERMINATE;
    enter_kernel();

    (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;
}




int Task_GetArg(void)
{
    int arg;
    uint8_t sreg;

    sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
    asm volatile ("cli"::);

    arg = cur_task->arg;

    (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;

    return arg;
}




int main()
{
 OS_Init();
 return 0;
}
